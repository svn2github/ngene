#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.42.
// 
namespace nGENEFramework {
    using namespace System;
    ref class NewDataSet;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class NewDataSet : public ::System::Data::DataSet {
        public : ref class libraryDataTable;
        public : ref class materialDataTable;
        public : ref class passDataTable;
        public : ref class textureDataTable;
        public : ref class vertex_shaderDataTable;
        public : ref class constantDataTable;
        public : ref class geometry_shaderDataTable;
        public : ref class pixel_shaderDataTable;
        public : ref class libraryRow;
        public : ref class materialRow;
        public : ref class passRow;
        public : ref class textureRow;
        public : ref class vertex_shaderRow;
        public : ref class constantRow;
        public : ref class geometry_shaderRow;
        public : ref class pixel_shaderRow;
        public : ref class libraryRowChangeEvent;
        public : ref class materialRowChangeEvent;
        public : ref class passRowChangeEvent;
        public : ref class textureRowChangeEvent;
        public : ref class vertex_shaderRowChangeEvent;
        public : ref class constantRowChangeEvent;
        public : ref class geometry_shaderRowChangeEvent;
        public : ref class pixel_shaderRowChangeEvent;
        
        private: nGENEFramework::NewDataSet::libraryDataTable^  tablelibrary;
        
        private: nGENEFramework::NewDataSet::materialDataTable^  tablematerial;
        
        private: nGENEFramework::NewDataSet::passDataTable^  tablepass;
        
        private: nGENEFramework::NewDataSet::textureDataTable^  tabletexture;
        
        private: nGENEFramework::NewDataSet::vertex_shaderDataTable^  tablevertex_shader;
        
        private: nGENEFramework::NewDataSet::constantDataTable^  tableconstant;
        
        private: nGENEFramework::NewDataSet::geometry_shaderDataTable^  tablegeometry_shader;
        
        private: nGENEFramework::NewDataSet::pixel_shaderDataTable^  tablepixel_shader;
        
        private: ::System::Data::DataRelation^  relationlibrary_material;
        
        private: ::System::Data::DataRelation^  relationmaterial_pass;
        
        private: ::System::Data::DataRelation^  relationpass_texture;
        
        private: ::System::Data::DataRelation^  relationpass_vertex_shader;
        
        private: ::System::Data::DataRelation^  relationvertex_shader_constant;
        
        private: ::System::Data::DataRelation^  relationgeometry_shader_constant;
        
        private: ::System::Data::DataRelation^  relationpixel_shader_constant;
        
        private: ::System::Data::DataRelation^  relationpass_geometry_shader;
        
        private: ::System::Data::DataRelation^  relationpass_pixel_shader;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void libraryRowChangeEventHandler(::System::Object^  sender, nGENEFramework::NewDataSet::libraryRowChangeEvent^  e);
        
        public : delegate System::Void materialRowChangeEventHandler(::System::Object^  sender, nGENEFramework::NewDataSet::materialRowChangeEvent^  e);
        
        public : delegate System::Void passRowChangeEventHandler(::System::Object^  sender, nGENEFramework::NewDataSet::passRowChangeEvent^  e);
        
        public : delegate System::Void textureRowChangeEventHandler(::System::Object^  sender, nGENEFramework::NewDataSet::textureRowChangeEvent^  e);
        
        public : delegate System::Void vertex_shaderRowChangeEventHandler(::System::Object^  sender, nGENEFramework::NewDataSet::vertex_shaderRowChangeEvent^  e);
        
        public : delegate System::Void constantRowChangeEventHandler(::System::Object^  sender, nGENEFramework::NewDataSet::constantRowChangeEvent^  e);
        
        public : delegate System::Void geometry_shaderRowChangeEventHandler(::System::Object^  sender, nGENEFramework::NewDataSet::geometry_shaderRowChangeEvent^  e);
        
        public : delegate System::Void pixel_shaderRowChangeEventHandler(::System::Object^  sender, nGENEFramework::NewDataSet::pixel_shaderRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property nGENEFramework::NewDataSet::libraryDataTable^  library {
            nGENEFramework::NewDataSet::libraryDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property nGENEFramework::NewDataSet::materialDataTable^  material {
            nGENEFramework::NewDataSet::materialDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property nGENEFramework::NewDataSet::passDataTable^  pass {
            nGENEFramework::NewDataSet::passDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property nGENEFramework::NewDataSet::textureDataTable^  texture {
            nGENEFramework::NewDataSet::textureDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property nGENEFramework::NewDataSet::vertex_shaderDataTable^  vertex_shader {
            nGENEFramework::NewDataSet::vertex_shaderDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property nGENEFramework::NewDataSet::constantDataTable^  constant {
            nGENEFramework::NewDataSet::constantDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property nGENEFramework::NewDataSet::geometry_shaderDataTable^  geometry_shader {
            nGENEFramework::NewDataSet::geometry_shaderDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property nGENEFramework::NewDataSet::pixel_shaderDataTable^  pixel_shader {
            nGENEFramework::NewDataSet::pixel_shaderDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializelibrary();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializematerial();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializepass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializetexture();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializevertex_shader();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeconstant();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializegeometry_shader();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializepixel_shader();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class libraryDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnauthor;
            
            private: ::System::Data::DataColumn^  columnversion;
            
            private: ::System::Data::DataColumn^  columnlibrary_Id;
            
            public: event nGENEFramework::NewDataSet::libraryRowChangeEventHandler^  libraryRowChanging;
            
            public: event nGENEFramework::NewDataSet::libraryRowChangeEventHandler^  libraryRowChanged;
            
            public: event nGENEFramework::NewDataSet::libraryRowChangeEventHandler^  libraryRowDeleting;
            
            public: event nGENEFramework::NewDataSet::libraryRowChangeEventHandler^  libraryRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            libraryDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            libraryDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            libraryDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  authorColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  versionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  library_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::libraryRow^  default [::System::Int32 ] {
                nGENEFramework::NewDataSet::libraryRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddlibraryRow(nGENEFramework::NewDataSet::libraryRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            nGENEFramework::NewDataSet::libraryRow^  AddlibraryRow(System::String^  name, System::String^  author, System::Single version);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            nGENEFramework::NewDataSet::libraryRow^  NewlibraryRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovelibraryRow(nGENEFramework::NewDataSet::libraryRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class materialDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnalpha_test;
            
            private: ::System::Data::DataColumn^  columnalpha_test_ref;
            
            private: ::System::Data::DataColumn^  columnsrc_blend;
            
            private: ::System::Data::DataColumn^  columndest_blend;
            
            private: ::System::Data::DataColumn^  columnorder;
            
            private: ::System::Data::DataColumn^  columntransparent;
            
            private: ::System::Data::DataColumn^  columnlightable;
            
            private: ::System::Data::DataColumn^  columntwo_sided;
            
            private: ::System::Data::DataColumn^  columnz_bias;
            
            private: ::System::Data::DataColumn^  columnz_write;
            
            private: ::System::Data::DataColumn^  columncast_shadow;
            
            private: ::System::Data::DataColumn^  columnemissive_factor;
            
            private: ::System::Data::DataColumn^  columnambient;
            
            private: ::System::Data::DataColumn^  columndiffuse;
            
            private: ::System::Data::DataColumn^  columnspecular;
            
            private: ::System::Data::DataColumn^  columnfill_mode;
            
            private: ::System::Data::DataColumn^  columnmaterial_Id;
            
            private: ::System::Data::DataColumn^  columnlibrary_Id;
            
            public: event nGENEFramework::NewDataSet::materialRowChangeEventHandler^  materialRowChanging;
            
            public: event nGENEFramework::NewDataSet::materialRowChangeEventHandler^  materialRowChanged;
            
            public: event nGENEFramework::NewDataSet::materialRowChangeEventHandler^  materialRowDeleting;
            
            public: event nGENEFramework::NewDataSet::materialRowChangeEventHandler^  materialRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            materialDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            materialDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            materialDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  alpha_testColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  alpha_test_refColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  src_blendColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  dest_blendColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  orderColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  transparentColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  lightableColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  two_sidedColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  z_biasColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  z_writeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  cast_shadowColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  emissive_factorColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  ambientColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  diffuseColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  specularColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  fill_modeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  material_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  library_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::materialRow^  default [::System::Int32 ] {
                nGENEFramework::NewDataSet::materialRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddmaterialRow(nGENEFramework::NewDataSet::materialRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            nGENEFramework::NewDataSet::materialRow^  AddmaterialRow(
                        System::String^  name, 
                        System::Boolean alpha_test, 
                        System::Int32 alpha_test_ref, 
                        System::Int32 src_blend, 
                        System::Int32 dest_blend, 
                        System::String^  order, 
                        System::Boolean transparent, 
                        System::Boolean lightable, 
                        System::Boolean two_sided, 
                        System::Single z_bias, 
                        System::Boolean z_write, 
                        System::Boolean cast_shadow, 
                        System::Single emissive_factor, 
                        System::String^  ambient, 
                        System::String^  diffuse, 
                        System::String^  specular, 
                        System::String^  fill_mode, 
                        nGENEFramework::NewDataSet::libraryRow^  parentlibraryRowBylibrary_material);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            nGENEFramework::NewDataSet::materialRow^  NewmaterialRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovematerialRow(nGENEFramework::NewDataSet::materialRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class passDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnorder;
            
            private: ::System::Data::DataColumn^  columnrun_count;
            
            private: ::System::Data::DataColumn^  columnpass_Id;
            
            private: ::System::Data::DataColumn^  columnmaterial_Id;
            
            public: event nGENEFramework::NewDataSet::passRowChangeEventHandler^  passRowChanging;
            
            public: event nGENEFramework::NewDataSet::passRowChangeEventHandler^  passRowChanged;
            
            public: event nGENEFramework::NewDataSet::passRowChangeEventHandler^  passRowDeleting;
            
            public: event nGENEFramework::NewDataSet::passRowChangeEventHandler^  passRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            passDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            passDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            passDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  orderColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  run_countColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  pass_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  material_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::passRow^  default [::System::Int32 ] {
                nGENEFramework::NewDataSet::passRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddpassRow(nGENEFramework::NewDataSet::passRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            nGENEFramework::NewDataSet::passRow^  AddpassRow(System::String^  name, System::String^  order, System::Int32 run_count, 
                        nGENEFramework::NewDataSet::materialRow^  parentmaterialRowBymaterial_pass);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            nGENEFramework::NewDataSet::passRow^  NewpassRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovepassRow(nGENEFramework::NewDataSet::passRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class textureDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnsampler;
            
            private: ::System::Data::DataColumn^  columnfile;
            
            private: ::System::Data::DataColumn^  columnfilter_min;
            
            private: ::System::Data::DataColumn^  columnfilter_mag;
            
            private: ::System::Data::DataColumn^  columnfilter_mip;
            
            private: ::System::Data::DataColumn^  columnaddressing_mode;
            
            private: ::System::Data::DataColumn^  columnformat;
            
            private: ::System::Data::DataColumn^  columnusage;
            
            private: ::System::Data::DataColumn^  columnheight_ratio;
            
            private: ::System::Data::DataColumn^  columnwidth_ratio;
            
            private: ::System::Data::DataColumn^  columnbind_as_texture;
            
            private: ::System::Data::DataColumn^  columnclear_target;
            
            private: ::System::Data::DataColumn^  columnclear_depth;
            
            private: ::System::Data::DataColumn^  columnpass_Id;
            
            public: event nGENEFramework::NewDataSet::textureRowChangeEventHandler^  textureRowChanging;
            
            public: event nGENEFramework::NewDataSet::textureRowChangeEventHandler^  textureRowChanged;
            
            public: event nGENEFramework::NewDataSet::textureRowChangeEventHandler^  textureRowDeleting;
            
            public: event nGENEFramework::NewDataSet::textureRowChangeEventHandler^  textureRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            textureDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            textureDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            textureDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  samplerColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  fileColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  filter_minColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  filter_magColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  filter_mipColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  addressing_modeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  formatColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  usageColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  height_ratioColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  width_ratioColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  bind_as_textureColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  clear_targetColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  clear_depthColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  pass_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::textureRow^  default [::System::Int32 ] {
                nGENEFramework::NewDataSet::textureRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddtextureRow(nGENEFramework::NewDataSet::textureRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            nGENEFramework::NewDataSet::textureRow^  AddtextureRow(
                        System::String^  name, 
                        System::Int32 sampler, 
                        System::String^  file, 
                        System::String^  filter_min, 
                        System::String^  filter_mag, 
                        System::String^  filter_mip, 
                        System::String^  addressing_mode, 
                        System::String^  format, 
                        System::String^  usage, 
                        System::String^  height_ratio, 
                        System::String^  width_ratio, 
                        System::Boolean bind_as_texture, 
                        System::Boolean clear_target, 
                        System::Boolean clear_depth, 
                        nGENEFramework::NewDataSet::passRow^  parentpassRowBypass_texture);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            nGENEFramework::NewDataSet::textureRow^  NewtextureRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovetextureRow(nGENEFramework::NewDataSet::textureRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class vertex_shaderDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnfile;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnprofile;
            
            private: ::System::Data::DataColumn^  columnfunction;
            
            private: ::System::Data::DataColumn^  columndefines;
            
            private: ::System::Data::DataColumn^  columnvertex_shader_Id;
            
            private: ::System::Data::DataColumn^  columnpass_Id;
            
            public: event nGENEFramework::NewDataSet::vertex_shaderRowChangeEventHandler^  vertex_shaderRowChanging;
            
            public: event nGENEFramework::NewDataSet::vertex_shaderRowChangeEventHandler^  vertex_shaderRowChanged;
            
            public: event nGENEFramework::NewDataSet::vertex_shaderRowChangeEventHandler^  vertex_shaderRowDeleting;
            
            public: event nGENEFramework::NewDataSet::vertex_shaderRowChangeEventHandler^  vertex_shaderRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            vertex_shaderDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            vertex_shaderDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            vertex_shaderDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  fileColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  profileColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  functionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  definesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  vertex_shader_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  pass_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::vertex_shaderRow^  default [::System::Int32 ] {
                nGENEFramework::NewDataSet::vertex_shaderRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Addvertex_shaderRow(nGENEFramework::NewDataSet::vertex_shaderRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            nGENEFramework::NewDataSet::vertex_shaderRow^  Addvertex_shaderRow(
                        System::String^  file, 
                        System::String^  name, 
                        System::String^  profile, 
                        System::String^  function, 
                        System::String^  defines, 
                        nGENEFramework::NewDataSet::passRow^  parentpassRowBypass_vertex_shader);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            nGENEFramework::NewDataSet::vertex_shaderRow^  Newvertex_shaderRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Removevertex_shaderRow(nGENEFramework::NewDataSet::vertex_shaderRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class constantDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columntype;
            
            private: ::System::Data::DataColumn^  columnsemantic;
            
            private: ::System::Data::DataColumn^  columndynamic;
            
            private: ::System::Data::DataColumn^  columnvertex_shader_Id;
            
            private: ::System::Data::DataColumn^  columngeometry_shader_Id;
            
            private: ::System::Data::DataColumn^  columnpixel_shader_Id;
            
            public: event nGENEFramework::NewDataSet::constantRowChangeEventHandler^  constantRowChanging;
            
            public: event nGENEFramework::NewDataSet::constantRowChangeEventHandler^  constantRowChanged;
            
            public: event nGENEFramework::NewDataSet::constantRowChangeEventHandler^  constantRowDeleting;
            
            public: event nGENEFramework::NewDataSet::constantRowChangeEventHandler^  constantRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            constantDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            constantDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            constantDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  typeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  semanticColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  dynamicColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  vertex_shader_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  geometry_shader_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  pixel_shader_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::constantRow^  default [::System::Int32 ] {
                nGENEFramework::NewDataSet::constantRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddconstantRow(nGENEFramework::NewDataSet::constantRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            nGENEFramework::NewDataSet::constantRow^  AddconstantRow(
                        System::String^  name, 
                        System::String^  type, 
                        System::String^  semantic, 
                        System::Boolean dynamic, 
                        nGENEFramework::NewDataSet::vertex_shaderRow^  parentvertex_shaderRowByvertex_shader_constant, 
                        nGENEFramework::NewDataSet::geometry_shaderRow^  parentgeometry_shaderRowBygeometry_shader_constant, 
                        nGENEFramework::NewDataSet::pixel_shaderRow^  parentpixel_shaderRowBypixel_shader_constant);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            nGENEFramework::NewDataSet::constantRow^  NewconstantRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemoveconstantRow(nGENEFramework::NewDataSet::constantRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class geometry_shaderDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnfile;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnprofile;
            
            private: ::System::Data::DataColumn^  columnfunction;
            
            private: ::System::Data::DataColumn^  columndefines;
            
            private: ::System::Data::DataColumn^  columngeometry_shader_Id;
            
            private: ::System::Data::DataColumn^  columnpass_Id;
            
            public: event nGENEFramework::NewDataSet::geometry_shaderRowChangeEventHandler^  geometry_shaderRowChanging;
            
            public: event nGENEFramework::NewDataSet::geometry_shaderRowChangeEventHandler^  geometry_shaderRowChanged;
            
            public: event nGENEFramework::NewDataSet::geometry_shaderRowChangeEventHandler^  geometry_shaderRowDeleting;
            
            public: event nGENEFramework::NewDataSet::geometry_shaderRowChangeEventHandler^  geometry_shaderRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            geometry_shaderDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            geometry_shaderDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            geometry_shaderDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  fileColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  profileColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  functionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  definesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  geometry_shader_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  pass_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::geometry_shaderRow^  default [::System::Int32 ] {
                nGENEFramework::NewDataSet::geometry_shaderRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Addgeometry_shaderRow(nGENEFramework::NewDataSet::geometry_shaderRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            nGENEFramework::NewDataSet::geometry_shaderRow^  Addgeometry_shaderRow(
                        System::String^  file, 
                        System::String^  name, 
                        System::String^  profile, 
                        System::String^  function, 
                        System::String^  defines, 
                        nGENEFramework::NewDataSet::passRow^  parentpassRowBypass_geometry_shader);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            nGENEFramework::NewDataSet::geometry_shaderRow^  Newgeometry_shaderRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Removegeometry_shaderRow(nGENEFramework::NewDataSet::geometry_shaderRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class pixel_shaderDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnfile;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnprofile;
            
            private: ::System::Data::DataColumn^  columnfunction;
            
            private: ::System::Data::DataColumn^  columndefines;
            
            private: ::System::Data::DataColumn^  columnpixel_shader_Id;
            
            private: ::System::Data::DataColumn^  columnpass_Id;
            
            public: event nGENEFramework::NewDataSet::pixel_shaderRowChangeEventHandler^  pixel_shaderRowChanging;
            
            public: event nGENEFramework::NewDataSet::pixel_shaderRowChangeEventHandler^  pixel_shaderRowChanged;
            
            public: event nGENEFramework::NewDataSet::pixel_shaderRowChangeEventHandler^  pixel_shaderRowDeleting;
            
            public: event nGENEFramework::NewDataSet::pixel_shaderRowChangeEventHandler^  pixel_shaderRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            pixel_shaderDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            pixel_shaderDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            pixel_shaderDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  fileColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  profileColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  functionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  definesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  pixel_shader_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  pass_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::pixel_shaderRow^  default [::System::Int32 ] {
                nGENEFramework::NewDataSet::pixel_shaderRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Addpixel_shaderRow(nGENEFramework::NewDataSet::pixel_shaderRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            nGENEFramework::NewDataSet::pixel_shaderRow^  Addpixel_shaderRow(
                        System::String^  file, 
                        System::String^  name, 
                        System::String^  profile, 
                        System::String^  function, 
                        System::String^  defines, 
                        nGENEFramework::NewDataSet::passRow^  parentpassRowBypass_pixel_shader);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            nGENEFramework::NewDataSet::pixel_shaderRow^  Newpixel_shaderRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Removepixel_shaderRow(nGENEFramework::NewDataSet::pixel_shaderRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class libraryRow : public ::System::Data::DataRow {
            
            private: nGENEFramework::NewDataSet::libraryDataTable^  tablelibrary;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            libraryRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  author {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single version {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 library_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsauthorNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetauthorNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< nGENEFramework::NewDataSet::materialRow^  >^  GetmaterialRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class materialRow : public ::System::Data::DataRow {
            
            private: nGENEFramework::NewDataSet::materialDataTable^  tablematerial;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            materialRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Boolean alpha_test {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 alpha_test_ref {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 src_blend {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 dest_blend {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  order {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Boolean transparent {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Boolean lightable {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Boolean two_sided {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single z_bias {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Boolean z_write {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Boolean cast_shadow {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single emissive_factor {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  ambient {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  diffuse {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  specular {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  fill_mode {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 material_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 library_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::libraryRow^  libraryRow {
                nGENEFramework::NewDataSet::libraryRow^  get();
                System::Void set(nGENEFramework::NewDataSet::libraryRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isalpha_testNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setalpha_testNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isalpha_test_refNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setalpha_test_refNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Issrc_blendNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setsrc_blendNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isdest_blendNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setdest_blendNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsorderNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetorderNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IstransparentNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SettransparentNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IslightableNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetlightableNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Istwo_sidedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Settwo_sidedNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isz_biasNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setz_biasNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isz_writeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setz_writeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iscast_shadowNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setcast_shadowNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isemissive_factorNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setemissive_factorNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsambientNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetambientNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdiffuseNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdiffuseNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsspecularNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetspecularNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isfill_modeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setfill_modeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Islibrary_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setlibrary_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< nGENEFramework::NewDataSet::passRow^  >^  GetpassRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class passRow : public ::System::Data::DataRow {
            
            private: nGENEFramework::NewDataSet::passDataTable^  tablepass;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            passRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  order {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 run_count {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 pass_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 material_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::materialRow^  materialRow {
                nGENEFramework::NewDataSet::materialRow^  get();
                System::Void set(nGENEFramework::NewDataSet::materialRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsorderNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetorderNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isrun_countNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setrun_countNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Ismaterial_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setmaterial_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< nGENEFramework::NewDataSet::textureRow^  >^  GettextureRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< nGENEFramework::NewDataSet::vertex_shaderRow^  >^  Getvertex_shaderRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< nGENEFramework::NewDataSet::geometry_shaderRow^  >^  Getgeometry_shaderRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< nGENEFramework::NewDataSet::pixel_shaderRow^  >^  Getpixel_shaderRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class textureRow : public ::System::Data::DataRow {
            
            private: nGENEFramework::NewDataSet::textureDataTable^  tabletexture;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            textureRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 sampler {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  file {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  filter_min {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  filter_mag {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  filter_mip {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  addressing_mode {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  format {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  usage {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  height_ratio {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  width_ratio {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Boolean bind_as_texture {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Boolean clear_target {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Boolean clear_depth {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 pass_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::passRow^  passRow {
                nGENEFramework::NewDataSet::passRow^  get();
                System::Void set(nGENEFramework::NewDataSet::passRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsfileNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetfileNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isfilter_minNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setfilter_minNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isfilter_magNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setfilter_magNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isfilter_mipNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setfilter_mipNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isaddressing_modeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setaddressing_modeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsformatNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetformatNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsusageNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetusageNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isheight_ratioNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setheight_ratioNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Iswidth_ratioNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setwidth_ratioNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isbind_as_textureNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setbind_as_textureNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isclear_targetNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setclear_targetNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isclear_depthNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setclear_depthNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Ispass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setpass_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class vertex_shaderRow : public ::System::Data::DataRow {
            
            private: nGENEFramework::NewDataSet::vertex_shaderDataTable^  tablevertex_shader;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            vertex_shaderRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  file {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  profile {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  function {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  defines {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 vertex_shader_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 pass_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::passRow^  passRow {
                nGENEFramework::NewDataSet::passRow^  get();
                System::Void set(nGENEFramework::NewDataSet::passRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsprofileNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetprofileNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsfunctionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetfunctionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdefinesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdefinesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Ispass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setpass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< nGENEFramework::NewDataSet::constantRow^  >^  GetconstantRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class constantRow : public ::System::Data::DataRow {
            
            private: nGENEFramework::NewDataSet::constantDataTable^  tableconstant;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            constantRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  type {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  semantic {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Boolean dynamic {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 vertex_shader_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 geometry_shader_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 pixel_shader_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::vertex_shaderRow^  vertex_shaderRow {
                nGENEFramework::NewDataSet::vertex_shaderRow^  get();
                System::Void set(nGENEFramework::NewDataSet::vertex_shaderRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::geometry_shaderRow^  geometry_shaderRow {
                nGENEFramework::NewDataSet::geometry_shaderRow^  get();
                System::Void set(nGENEFramework::NewDataSet::geometry_shaderRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::pixel_shaderRow^  pixel_shaderRow {
                nGENEFramework::NewDataSet::pixel_shaderRow^  get();
                System::Void set(nGENEFramework::NewDataSet::pixel_shaderRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IstypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SettypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IssemanticNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetsemanticNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdynamicNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdynamicNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isvertex_shader_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setvertex_shader_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isgeometry_shader_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setgeometry_shader_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Ispixel_shader_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setpixel_shader_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class geometry_shaderRow : public ::System::Data::DataRow {
            
            private: nGENEFramework::NewDataSet::geometry_shaderDataTable^  tablegeometry_shader;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            geometry_shaderRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  file {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  profile {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  function {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  defines {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 geometry_shader_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 pass_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::passRow^  passRow {
                nGENEFramework::NewDataSet::passRow^  get();
                System::Void set(nGENEFramework::NewDataSet::passRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsprofileNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetprofileNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsfunctionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetfunctionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdefinesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdefinesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Ispass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setpass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< nGENEFramework::NewDataSet::constantRow^  >^  GetconstantRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class pixel_shaderRow : public ::System::Data::DataRow {
            
            private: nGENEFramework::NewDataSet::pixel_shaderDataTable^  tablepixel_shader;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            pixel_shaderRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  file {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  profile {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  function {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  defines {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 pixel_shader_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 pass_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::passRow^  passRow {
                nGENEFramework::NewDataSet::passRow^  get();
                System::Void set(nGENEFramework::NewDataSet::passRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetnameNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsprofileNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetprofileNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsfunctionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetfunctionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdefinesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdefinesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Ispass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setpass_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< nGENEFramework::NewDataSet::constantRow^  >^  GetconstantRows();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class libraryRowChangeEvent : public ::System::EventArgs {
            
            private: nGENEFramework::NewDataSet::libraryRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            libraryRowChangeEvent(nGENEFramework::NewDataSet::libraryRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::libraryRow^  Row {
                nGENEFramework::NewDataSet::libraryRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class materialRowChangeEvent : public ::System::EventArgs {
            
            private: nGENEFramework::NewDataSet::materialRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            materialRowChangeEvent(nGENEFramework::NewDataSet::materialRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::materialRow^  Row {
                nGENEFramework::NewDataSet::materialRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class passRowChangeEvent : public ::System::EventArgs {
            
            private: nGENEFramework::NewDataSet::passRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            passRowChangeEvent(nGENEFramework::NewDataSet::passRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::passRow^  Row {
                nGENEFramework::NewDataSet::passRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class textureRowChangeEvent : public ::System::EventArgs {
            
            private: nGENEFramework::NewDataSet::textureRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            textureRowChangeEvent(nGENEFramework::NewDataSet::textureRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::textureRow^  Row {
                nGENEFramework::NewDataSet::textureRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class vertex_shaderRowChangeEvent : public ::System::EventArgs {
            
            private: nGENEFramework::NewDataSet::vertex_shaderRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            vertex_shaderRowChangeEvent(nGENEFramework::NewDataSet::vertex_shaderRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::vertex_shaderRow^  Row {
                nGENEFramework::NewDataSet::vertex_shaderRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class constantRowChangeEvent : public ::System::EventArgs {
            
            private: nGENEFramework::NewDataSet::constantRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            constantRowChangeEvent(nGENEFramework::NewDataSet::constantRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::constantRow^  Row {
                nGENEFramework::NewDataSet::constantRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class geometry_shaderRowChangeEvent : public ::System::EventArgs {
            
            private: nGENEFramework::NewDataSet::geometry_shaderRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            geometry_shaderRowChangeEvent(nGENEFramework::NewDataSet::geometry_shaderRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::geometry_shaderRow^  Row {
                nGENEFramework::NewDataSet::geometry_shaderRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class pixel_shaderRowChangeEvent : public ::System::EventArgs {
            
            private: nGENEFramework::NewDataSet::pixel_shaderRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            pixel_shaderRowChangeEvent(nGENEFramework::NewDataSet::pixel_shaderRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property nGENEFramework::NewDataSet::pixel_shaderRow^  Row {
                nGENEFramework::NewDataSet::pixel_shaderRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace nGENEFramework {
    
    
    inline NewDataSet::NewDataSet() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &nGENEFramework::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &nGENEFramework::NewDataSet::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"library"] != nullptr) {
                __super::Tables->Add((gcnew nGENEFramework::NewDataSet::libraryDataTable(ds->Tables[L"library"])));
            }
            if (ds->Tables[L"material"] != nullptr) {
                __super::Tables->Add((gcnew nGENEFramework::NewDataSet::materialDataTable(ds->Tables[L"material"])));
            }
            if (ds->Tables[L"pass"] != nullptr) {
                __super::Tables->Add((gcnew nGENEFramework::NewDataSet::passDataTable(ds->Tables[L"pass"])));
            }
            if (ds->Tables[L"texture"] != nullptr) {
                __super::Tables->Add((gcnew nGENEFramework::NewDataSet::textureDataTable(ds->Tables[L"texture"])));
            }
            if (ds->Tables[L"vertex_shader"] != nullptr) {
                __super::Tables->Add((gcnew nGENEFramework::NewDataSet::vertex_shaderDataTable(ds->Tables[L"vertex_shader"])));
            }
            if (ds->Tables[L"constant"] != nullptr) {
                __super::Tables->Add((gcnew nGENEFramework::NewDataSet::constantDataTable(ds->Tables[L"constant"])));
            }
            if (ds->Tables[L"geometry_shader"] != nullptr) {
                __super::Tables->Add((gcnew nGENEFramework::NewDataSet::geometry_shaderDataTable(ds->Tables[L"geometry_shader"])));
            }
            if (ds->Tables[L"pixel_shader"] != nullptr) {
                __super::Tables->Add((gcnew nGENEFramework::NewDataSet::pixel_shaderDataTable(ds->Tables[L"pixel_shader"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &nGENEFramework::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline nGENEFramework::NewDataSet::libraryDataTable^  NewDataSet::library::get() {
        return this->tablelibrary;
    }
    
    inline nGENEFramework::NewDataSet::materialDataTable^  NewDataSet::material::get() {
        return this->tablematerial;
    }
    
    inline nGENEFramework::NewDataSet::passDataTable^  NewDataSet::pass::get() {
        return this->tablepass;
    }
    
    inline nGENEFramework::NewDataSet::textureDataTable^  NewDataSet::texture::get() {
        return this->tabletexture;
    }
    
    inline nGENEFramework::NewDataSet::vertex_shaderDataTable^  NewDataSet::vertex_shader::get() {
        return this->tablevertex_shader;
    }
    
    inline nGENEFramework::NewDataSet::constantDataTable^  NewDataSet::constant::get() {
        return this->tableconstant;
    }
    
    inline nGENEFramework::NewDataSet::geometry_shaderDataTable^  NewDataSet::geometry_shader::get() {
        return this->tablegeometry_shader;
    }
    
    inline nGENEFramework::NewDataSet::pixel_shaderDataTable^  NewDataSet::pixel_shader::get() {
        return this->tablepixel_shader;
    }
    
    inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  NewDataSet::Clone() {
        nGENEFramework::NewDataSet^  cln = (cli::safe_cast<nGENEFramework::NewDataSet^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"library"] != nullptr) {
                __super::Tables->Add((gcnew nGENEFramework::NewDataSet::libraryDataTable(ds->Tables[L"library"])));
            }
            if (ds->Tables[L"material"] != nullptr) {
                __super::Tables->Add((gcnew nGENEFramework::NewDataSet::materialDataTable(ds->Tables[L"material"])));
            }
            if (ds->Tables[L"pass"] != nullptr) {
                __super::Tables->Add((gcnew nGENEFramework::NewDataSet::passDataTable(ds->Tables[L"pass"])));
            }
            if (ds->Tables[L"texture"] != nullptr) {
                __super::Tables->Add((gcnew nGENEFramework::NewDataSet::textureDataTable(ds->Tables[L"texture"])));
            }
            if (ds->Tables[L"vertex_shader"] != nullptr) {
                __super::Tables->Add((gcnew nGENEFramework::NewDataSet::vertex_shaderDataTable(ds->Tables[L"vertex_shader"])));
            }
            if (ds->Tables[L"constant"] != nullptr) {
                __super::Tables->Add((gcnew nGENEFramework::NewDataSet::constantDataTable(ds->Tables[L"constant"])));
            }
            if (ds->Tables[L"geometry_shader"] != nullptr) {
                __super::Tables->Add((gcnew nGENEFramework::NewDataSet::geometry_shaderDataTable(ds->Tables[L"geometry_shader"])));
            }
            if (ds->Tables[L"pixel_shader"] != nullptr) {
                __super::Tables->Add((gcnew nGENEFramework::NewDataSet::pixel_shaderDataTable(ds->Tables[L"pixel_shader"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void NewDataSet::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
        this->tablelibrary = (cli::safe_cast<nGENEFramework::NewDataSet::libraryDataTable^  >(__super::Tables[L"library"]));
        if (initTable == true) {
            if (this->tablelibrary != nullptr) {
                this->tablelibrary->InitVars();
            }
        }
        this->tablematerial = (cli::safe_cast<nGENEFramework::NewDataSet::materialDataTable^  >(__super::Tables[L"material"]));
        if (initTable == true) {
            if (this->tablematerial != nullptr) {
                this->tablematerial->InitVars();
            }
        }
        this->tablepass = (cli::safe_cast<nGENEFramework::NewDataSet::passDataTable^  >(__super::Tables[L"pass"]));
        if (initTable == true) {
            if (this->tablepass != nullptr) {
                this->tablepass->InitVars();
            }
        }
        this->tabletexture = (cli::safe_cast<nGENEFramework::NewDataSet::textureDataTable^  >(__super::Tables[L"texture"]));
        if (initTable == true) {
            if (this->tabletexture != nullptr) {
                this->tabletexture->InitVars();
            }
        }
        this->tablevertex_shader = (cli::safe_cast<nGENEFramework::NewDataSet::vertex_shaderDataTable^  >(__super::Tables[L"vertex_shader"]));
        if (initTable == true) {
            if (this->tablevertex_shader != nullptr) {
                this->tablevertex_shader->InitVars();
            }
        }
        this->tableconstant = (cli::safe_cast<nGENEFramework::NewDataSet::constantDataTable^  >(__super::Tables[L"constant"]));
        if (initTable == true) {
            if (this->tableconstant != nullptr) {
                this->tableconstant->InitVars();
            }
        }
        this->tablegeometry_shader = (cli::safe_cast<nGENEFramework::NewDataSet::geometry_shaderDataTable^  >(__super::Tables[L"geometry_shader"]));
        if (initTable == true) {
            if (this->tablegeometry_shader != nullptr) {
                this->tablegeometry_shader->InitVars();
            }
        }
        this->tablepixel_shader = (cli::safe_cast<nGENEFramework::NewDataSet::pixel_shaderDataTable^  >(__super::Tables[L"pixel_shader"]));
        if (initTable == true) {
            if (this->tablepixel_shader != nullptr) {
                this->tablepixel_shader->InitVars();
            }
        }
        this->relationlibrary_material = this->Relations[L"library_material"];
        this->relationmaterial_pass = this->Relations[L"material_pass"];
        this->relationpass_texture = this->Relations[L"pass_texture"];
        this->relationpass_vertex_shader = this->Relations[L"pass_vertex_shader"];
        this->relationvertex_shader_constant = this->Relations[L"vertex_shader_constant"];
        this->relationgeometry_shader_constant = this->Relations[L"geometry_shader_constant"];
        this->relationpixel_shader_constant = this->Relations[L"pixel_shader_constant"];
        this->relationpass_geometry_shader = this->Relations[L"pass_geometry_shader"];
        this->relationpass_pixel_shader = this->Relations[L"pass_pixel_shader"];
    }
    
    inline ::System::Void NewDataSet::InitClass() {
        this->DataSetName = L"NewDataSet";
        this->Prefix = L"";
        this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tablelibrary = (gcnew nGENEFramework::NewDataSet::libraryDataTable());
        __super::Tables->Add(this->tablelibrary);
        this->tablematerial = (gcnew nGENEFramework::NewDataSet::materialDataTable());
        __super::Tables->Add(this->tablematerial);
        this->tablepass = (gcnew nGENEFramework::NewDataSet::passDataTable());
        __super::Tables->Add(this->tablepass);
        this->tabletexture = (gcnew nGENEFramework::NewDataSet::textureDataTable());
        __super::Tables->Add(this->tabletexture);
        this->tablevertex_shader = (gcnew nGENEFramework::NewDataSet::vertex_shaderDataTable());
        __super::Tables->Add(this->tablevertex_shader);
        this->tableconstant = (gcnew nGENEFramework::NewDataSet::constantDataTable());
        __super::Tables->Add(this->tableconstant);
        this->tablegeometry_shader = (gcnew nGENEFramework::NewDataSet::geometry_shaderDataTable());
        __super::Tables->Add(this->tablegeometry_shader);
        this->tablepixel_shader = (gcnew nGENEFramework::NewDataSet::pixel_shaderDataTable());
        __super::Tables->Add(this->tablepixel_shader);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"library_material", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelibrary->library_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablematerial->library_IdColumn}));
        this->tablematerial->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"material_pass", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablematerial->material_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepass->material_IdColumn}));
        this->tablepass->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"pass_texture", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepass->pass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletexture->pass_IdColumn}));
        this->tabletexture->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"pass_vertex_shader", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepass->pass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevertex_shader->pass_IdColumn}));
        this->tablevertex_shader->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"vertex_shader_constant", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevertex_shader->vertex_shader_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconstant->vertex_shader_IdColumn}));
        this->tableconstant->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"geometry_shader_constant", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablegeometry_shader->geometry_shader_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconstant->geometry_shader_IdColumn}));
        this->tableconstant->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"pixel_shader_constant", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepixel_shader->pixel_shader_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconstant->pixel_shader_IdColumn}));
        this->tableconstant->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"pass_geometry_shader", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepass->pass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablegeometry_shader->pass_IdColumn}));
        this->tablegeometry_shader->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"pass_pixel_shader", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepass->pass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepixel_shader->pass_IdColumn}));
        this->tablepixel_shader->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationlibrary_material = (gcnew ::System::Data::DataRelation(L"library_material", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablelibrary->library_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablematerial->library_IdColumn}, false));
        this->relationlibrary_material->Nested = true;
        this->Relations->Add(this->relationlibrary_material);
        this->relationmaterial_pass = (gcnew ::System::Data::DataRelation(L"material_pass", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablematerial->material_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepass->material_IdColumn}, false));
        this->relationmaterial_pass->Nested = true;
        this->Relations->Add(this->relationmaterial_pass);
        this->relationpass_texture = (gcnew ::System::Data::DataRelation(L"pass_texture", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepass->pass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabletexture->pass_IdColumn}, false));
        this->relationpass_texture->Nested = true;
        this->Relations->Add(this->relationpass_texture);
        this->relationpass_vertex_shader = (gcnew ::System::Data::DataRelation(L"pass_vertex_shader", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepass->pass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevertex_shader->pass_IdColumn}, false));
        this->relationpass_vertex_shader->Nested = true;
        this->Relations->Add(this->relationpass_vertex_shader);
        this->relationvertex_shader_constant = (gcnew ::System::Data::DataRelation(L"vertex_shader_constant", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevertex_shader->vertex_shader_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconstant->vertex_shader_IdColumn}, false));
        this->relationvertex_shader_constant->Nested = true;
        this->Relations->Add(this->relationvertex_shader_constant);
        this->relationgeometry_shader_constant = (gcnew ::System::Data::DataRelation(L"geometry_shader_constant", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablegeometry_shader->geometry_shader_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconstant->geometry_shader_IdColumn}, false));
        this->relationgeometry_shader_constant->Nested = true;
        this->Relations->Add(this->relationgeometry_shader_constant);
        this->relationpixel_shader_constant = (gcnew ::System::Data::DataRelation(L"pixel_shader_constant", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepixel_shader->pixel_shader_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableconstant->pixel_shader_IdColumn}, false));
        this->relationpixel_shader_constant->Nested = true;
        this->Relations->Add(this->relationpixel_shader_constant);
        this->relationpass_geometry_shader = (gcnew ::System::Data::DataRelation(L"pass_geometry_shader", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepass->pass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablegeometry_shader->pass_IdColumn}, false));
        this->relationpass_geometry_shader->Nested = true;
        this->Relations->Add(this->relationpass_geometry_shader);
        this->relationpass_pixel_shader = (gcnew ::System::Data::DataRelation(L"pass_pixel_shader", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepass->pass_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablepixel_shader->pass_IdColumn}, false));
        this->relationpass_pixel_shader->Nested = true;
        this->Relations->Add(this->relationpass_pixel_shader);
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializelibrary() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializematerial() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializepass() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializetexture() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializevertex_shader() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeconstant() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializegeometry_shader() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializepixel_shader() {
        return false;
    }
    
    inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        nGENEFramework::NewDataSet^  ds = (gcnew nGENEFramework::NewDataSet());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::libraryDataTable::libraryDataTable() {
        this->TableName = L"library";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::libraryDataTable::libraryDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::libraryDataTable::libraryDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::libraryDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::libraryDataTable::authorColumn::get() {
        return this->columnauthor;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::libraryDataTable::versionColumn::get() {
        return this->columnversion;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::libraryDataTable::library_IdColumn::get() {
        return this->columnlibrary_Id;
    }
    
    inline ::System::Int32 NewDataSet::libraryDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline nGENEFramework::NewDataSet::libraryRow^  NewDataSet::libraryDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<nGENEFramework::NewDataSet::libraryRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::libraryDataTable::AddlibraryRow(nGENEFramework::NewDataSet::libraryRow^  row) {
        this->Rows->Add(row);
    }
    
    inline nGENEFramework::NewDataSet::libraryRow^  NewDataSet::libraryDataTable::AddlibraryRow(System::String^  name, System::String^  author, 
                System::Single version) {
        nGENEFramework::NewDataSet::libraryRow^  rowlibraryRow = (cli::safe_cast<nGENEFramework::NewDataSet::libraryRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(4) {name, author, version, 
            nullptr};
        rowlibraryRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowlibraryRow);
        return rowlibraryRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::libraryDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::libraryDataTable::Clone() {
        nGENEFramework::NewDataSet::libraryDataTable^  cln = (cli::safe_cast<nGENEFramework::NewDataSet::libraryDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::libraryDataTable::CreateInstance() {
        return (gcnew nGENEFramework::NewDataSet::libraryDataTable());
    }
    
    inline ::System::Void NewDataSet::libraryDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnauthor = __super::Columns[L"author"];
        this->columnversion = __super::Columns[L"version"];
        this->columnlibrary_Id = __super::Columns[L"library_Id"];
    }
    
    inline ::System::Void NewDataSet::libraryDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnauthor = (gcnew ::System::Data::DataColumn(L"author", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnauthor);
        this->columnversion = (gcnew ::System::Data::DataColumn(L"version", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnversion);
        this->columnlibrary_Id = (gcnew ::System::Data::DataColumn(L"library_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlibrary_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnlibrary_Id}, 
                true)));
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columnauthor->Namespace = L"";
        this->columnversion->AllowDBNull = false;
        this->columnversion->Namespace = L"";
        this->columnlibrary_Id->AutoIncrement = true;
        this->columnlibrary_Id->AllowDBNull = false;
        this->columnlibrary_Id->Unique = true;
    }
    
    inline nGENEFramework::NewDataSet::libraryRow^  NewDataSet::libraryDataTable::NewlibraryRow() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::libraryRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::libraryDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew nGENEFramework::NewDataSet::libraryRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::libraryDataTable::GetRowType() {
        return nGENEFramework::NewDataSet::libraryRow::typeid;
    }
    
    inline ::System::Void NewDataSet::libraryDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->libraryRowChanged(this, (gcnew nGENEFramework::NewDataSet::libraryRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::libraryRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::libraryDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->libraryRowChanging(this, (gcnew nGENEFramework::NewDataSet::libraryRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::libraryRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::libraryDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->libraryRowDeleted(this, (gcnew nGENEFramework::NewDataSet::libraryRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::libraryRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::libraryDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->libraryRowDeleting(this, (gcnew nGENEFramework::NewDataSet::libraryRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::libraryRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::libraryDataTable::RemovelibraryRow(nGENEFramework::NewDataSet::libraryRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::libraryDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        nGENEFramework::NewDataSet^  ds = (gcnew nGENEFramework::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"libraryDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::materialDataTable::materialDataTable() {
        this->TableName = L"material";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::materialDataTable::materialDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::materialDataTable::materialDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::alpha_testColumn::get() {
        return this->columnalpha_test;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::alpha_test_refColumn::get() {
        return this->columnalpha_test_ref;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::src_blendColumn::get() {
        return this->columnsrc_blend;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::dest_blendColumn::get() {
        return this->columndest_blend;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::orderColumn::get() {
        return this->columnorder;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::transparentColumn::get() {
        return this->columntransparent;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::lightableColumn::get() {
        return this->columnlightable;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::two_sidedColumn::get() {
        return this->columntwo_sided;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::z_biasColumn::get() {
        return this->columnz_bias;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::z_writeColumn::get() {
        return this->columnz_write;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::cast_shadowColumn::get() {
        return this->columncast_shadow;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::emissive_factorColumn::get() {
        return this->columnemissive_factor;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::ambientColumn::get() {
        return this->columnambient;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::diffuseColumn::get() {
        return this->columndiffuse;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::specularColumn::get() {
        return this->columnspecular;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::fill_modeColumn::get() {
        return this->columnfill_mode;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::material_IdColumn::get() {
        return this->columnmaterial_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::materialDataTable::library_IdColumn::get() {
        return this->columnlibrary_Id;
    }
    
    inline ::System::Int32 NewDataSet::materialDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline nGENEFramework::NewDataSet::materialRow^  NewDataSet::materialDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<nGENEFramework::NewDataSet::materialRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::materialDataTable::AddmaterialRow(nGENEFramework::NewDataSet::materialRow^  row) {
        this->Rows->Add(row);
    }
    
    inline nGENEFramework::NewDataSet::materialRow^  NewDataSet::materialDataTable::AddmaterialRow(
                System::String^  name, 
                System::Boolean alpha_test, 
                System::Int32 alpha_test_ref, 
                System::Int32 src_blend, 
                System::Int32 dest_blend, 
                System::String^  order, 
                System::Boolean transparent, 
                System::Boolean lightable, 
                System::Boolean two_sided, 
                System::Single z_bias, 
                System::Boolean z_write, 
                System::Boolean cast_shadow, 
                System::Single emissive_factor, 
                System::String^  ambient, 
                System::String^  diffuse, 
                System::String^  specular, 
                System::String^  fill_mode, 
                nGENEFramework::NewDataSet::libraryRow^  parentlibraryRowBylibrary_material) {
        nGENEFramework::NewDataSet::materialRow^  rowmaterialRow = (cli::safe_cast<nGENEFramework::NewDataSet::materialRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(19) {name, alpha_test, alpha_test_ref, 
            src_blend, dest_blend, order, transparent, lightable, two_sided, z_bias, z_write, cast_shadow, emissive_factor, ambient, 
            diffuse, specular, fill_mode, nullptr, nullptr};
        if (parentlibraryRowBylibrary_material != nullptr) {
            columnValuesArray[18] = parentlibraryRowBylibrary_material[3];
        }
        rowmaterialRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowmaterialRow);
        return rowmaterialRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::materialDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::materialDataTable::Clone() {
        nGENEFramework::NewDataSet::materialDataTable^  cln = (cli::safe_cast<nGENEFramework::NewDataSet::materialDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::materialDataTable::CreateInstance() {
        return (gcnew nGENEFramework::NewDataSet::materialDataTable());
    }
    
    inline ::System::Void NewDataSet::materialDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnalpha_test = __super::Columns[L"alpha_test"];
        this->columnalpha_test_ref = __super::Columns[L"alpha_test_ref"];
        this->columnsrc_blend = __super::Columns[L"src_blend"];
        this->columndest_blend = __super::Columns[L"dest_blend"];
        this->columnorder = __super::Columns[L"order"];
        this->columntransparent = __super::Columns[L"transparent"];
        this->columnlightable = __super::Columns[L"lightable"];
        this->columntwo_sided = __super::Columns[L"two_sided"];
        this->columnz_bias = __super::Columns[L"z_bias"];
        this->columnz_write = __super::Columns[L"z_write"];
        this->columncast_shadow = __super::Columns[L"cast_shadow"];
        this->columnemissive_factor = __super::Columns[L"emissive_factor"];
        this->columnambient = __super::Columns[L"ambient"];
        this->columndiffuse = __super::Columns[L"diffuse"];
        this->columnspecular = __super::Columns[L"specular"];
        this->columnfill_mode = __super::Columns[L"fill_mode"];
        this->columnmaterial_Id = __super::Columns[L"material_Id"];
        this->columnlibrary_Id = __super::Columns[L"library_Id"];
    }
    
    inline ::System::Void NewDataSet::materialDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnalpha_test = (gcnew ::System::Data::DataColumn(L"alpha_test", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnalpha_test);
        this->columnalpha_test_ref = (gcnew ::System::Data::DataColumn(L"alpha_test_ref", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnalpha_test_ref);
        this->columnsrc_blend = (gcnew ::System::Data::DataColumn(L"src_blend", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnsrc_blend);
        this->columndest_blend = (gcnew ::System::Data::DataColumn(L"dest_blend", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndest_blend);
        this->columnorder = (gcnew ::System::Data::DataColumn(L"order", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnorder);
        this->columntransparent = (gcnew ::System::Data::DataColumn(L"transparent", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntransparent);
        this->columnlightable = (gcnew ::System::Data::DataColumn(L"lightable", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnlightable);
        this->columntwo_sided = (gcnew ::System::Data::DataColumn(L"two_sided", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntwo_sided);
        this->columnz_bias = (gcnew ::System::Data::DataColumn(L"z_bias", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnz_bias);
        this->columnz_write = (gcnew ::System::Data::DataColumn(L"z_write", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnz_write);
        this->columncast_shadow = (gcnew ::System::Data::DataColumn(L"cast_shadow", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncast_shadow);
        this->columnemissive_factor = (gcnew ::System::Data::DataColumn(L"emissive_factor", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnemissive_factor);
        this->columnambient = (gcnew ::System::Data::DataColumn(L"ambient", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnambient);
        this->columndiffuse = (gcnew ::System::Data::DataColumn(L"diffuse", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndiffuse);
        this->columnspecular = (gcnew ::System::Data::DataColumn(L"specular", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnspecular);
        this->columnfill_mode = (gcnew ::System::Data::DataColumn(L"fill_mode", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfill_mode);
        this->columnmaterial_Id = (gcnew ::System::Data::DataColumn(L"material_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnmaterial_Id);
        this->columnlibrary_Id = (gcnew ::System::Data::DataColumn(L"library_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnlibrary_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnmaterial_Id}, 
                true)));
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columnalpha_test->Namespace = L"";
        this->columnalpha_test_ref->Namespace = L"";
        this->columnsrc_blend->Namespace = L"";
        this->columndest_blend->Namespace = L"";
        this->columnorder->Namespace = L"";
        this->columntransparent->Namespace = L"";
        this->columnlightable->Namespace = L"";
        this->columntwo_sided->Namespace = L"";
        this->columnz_bias->Namespace = L"";
        this->columnz_write->Namespace = L"";
        this->columncast_shadow->Namespace = L"";
        this->columnemissive_factor->Namespace = L"";
        this->columnambient->Namespace = L"";
        this->columndiffuse->Namespace = L"";
        this->columnspecular->Namespace = L"";
        this->columnfill_mode->Namespace = L"";
        this->columnmaterial_Id->AutoIncrement = true;
        this->columnmaterial_Id->AllowDBNull = false;
        this->columnmaterial_Id->Unique = true;
    }
    
    inline nGENEFramework::NewDataSet::materialRow^  NewDataSet::materialDataTable::NewmaterialRow() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::materialRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::materialDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew nGENEFramework::NewDataSet::materialRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::materialDataTable::GetRowType() {
        return nGENEFramework::NewDataSet::materialRow::typeid;
    }
    
    inline ::System::Void NewDataSet::materialDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->materialRowChanged(this, (gcnew nGENEFramework::NewDataSet::materialRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::materialRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::materialDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->materialRowChanging(this, (gcnew nGENEFramework::NewDataSet::materialRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::materialRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::materialDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->materialRowDeleted(this, (gcnew nGENEFramework::NewDataSet::materialRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::materialRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::materialDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->materialRowDeleting(this, (gcnew nGENEFramework::NewDataSet::materialRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::materialRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::materialDataTable::RemovematerialRow(nGENEFramework::NewDataSet::materialRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::materialDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        nGENEFramework::NewDataSet^  ds = (gcnew nGENEFramework::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"materialDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::passDataTable::passDataTable() {
        this->TableName = L"pass";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::passDataTable::passDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::passDataTable::passDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::passDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::passDataTable::orderColumn::get() {
        return this->columnorder;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::passDataTable::run_countColumn::get() {
        return this->columnrun_count;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::passDataTable::pass_IdColumn::get() {
        return this->columnpass_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::passDataTable::material_IdColumn::get() {
        return this->columnmaterial_Id;
    }
    
    inline ::System::Int32 NewDataSet::passDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline nGENEFramework::NewDataSet::passRow^  NewDataSet::passDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<nGENEFramework::NewDataSet::passRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::passDataTable::AddpassRow(nGENEFramework::NewDataSet::passRow^  row) {
        this->Rows->Add(row);
    }
    
    inline nGENEFramework::NewDataSet::passRow^  NewDataSet::passDataTable::AddpassRow(System::String^  name, System::String^  order, 
                System::Int32 run_count, nGENEFramework::NewDataSet::materialRow^  parentmaterialRowBymaterial_pass) {
        nGENEFramework::NewDataSet::passRow^  rowpassRow = (cli::safe_cast<nGENEFramework::NewDataSet::passRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {name, order, run_count, 
            nullptr, nullptr};
        if (parentmaterialRowBymaterial_pass != nullptr) {
            columnValuesArray[4] = parentmaterialRowBymaterial_pass[17];
        }
        rowpassRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowpassRow);
        return rowpassRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::passDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::passDataTable::Clone() {
        nGENEFramework::NewDataSet::passDataTable^  cln = (cli::safe_cast<nGENEFramework::NewDataSet::passDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::passDataTable::CreateInstance() {
        return (gcnew nGENEFramework::NewDataSet::passDataTable());
    }
    
    inline ::System::Void NewDataSet::passDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnorder = __super::Columns[L"order"];
        this->columnrun_count = __super::Columns[L"run_count"];
        this->columnpass_Id = __super::Columns[L"pass_Id"];
        this->columnmaterial_Id = __super::Columns[L"material_Id"];
    }
    
    inline ::System::Void NewDataSet::passDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnorder = (gcnew ::System::Data::DataColumn(L"order", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnorder);
        this->columnrun_count = (gcnew ::System::Data::DataColumn(L"run_count", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnrun_count);
        this->columnpass_Id = (gcnew ::System::Data::DataColumn(L"pass_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnpass_Id);
        this->columnmaterial_Id = (gcnew ::System::Data::DataColumn(L"material_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnmaterial_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnpass_Id}, 
                true)));
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columnorder->Namespace = L"";
        this->columnrun_count->Namespace = L"";
        this->columnpass_Id->AutoIncrement = true;
        this->columnpass_Id->AllowDBNull = false;
        this->columnpass_Id->Unique = true;
    }
    
    inline nGENEFramework::NewDataSet::passRow^  NewDataSet::passDataTable::NewpassRow() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::passRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::passDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew nGENEFramework::NewDataSet::passRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::passDataTable::GetRowType() {
        return nGENEFramework::NewDataSet::passRow::typeid;
    }
    
    inline ::System::Void NewDataSet::passDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->passRowChanged(this, (gcnew nGENEFramework::NewDataSet::passRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::passRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::passDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->passRowChanging(this, (gcnew nGENEFramework::NewDataSet::passRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::passRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::passDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->passRowDeleted(this, (gcnew nGENEFramework::NewDataSet::passRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::passRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::passDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->passRowDeleting(this, (gcnew nGENEFramework::NewDataSet::passRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::passRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::passDataTable::RemovepassRow(nGENEFramework::NewDataSet::passRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::passDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        nGENEFramework::NewDataSet^  ds = (gcnew nGENEFramework::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"passDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::textureDataTable::textureDataTable() {
        this->TableName = L"texture";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::textureDataTable::textureDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::textureDataTable::textureDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::textureDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::textureDataTable::samplerColumn::get() {
        return this->columnsampler;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::textureDataTable::fileColumn::get() {
        return this->columnfile;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::textureDataTable::filter_minColumn::get() {
        return this->columnfilter_min;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::textureDataTable::filter_magColumn::get() {
        return this->columnfilter_mag;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::textureDataTable::filter_mipColumn::get() {
        return this->columnfilter_mip;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::textureDataTable::addressing_modeColumn::get() {
        return this->columnaddressing_mode;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::textureDataTable::formatColumn::get() {
        return this->columnformat;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::textureDataTable::usageColumn::get() {
        return this->columnusage;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::textureDataTable::height_ratioColumn::get() {
        return this->columnheight_ratio;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::textureDataTable::width_ratioColumn::get() {
        return this->columnwidth_ratio;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::textureDataTable::bind_as_textureColumn::get() {
        return this->columnbind_as_texture;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::textureDataTable::clear_targetColumn::get() {
        return this->columnclear_target;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::textureDataTable::clear_depthColumn::get() {
        return this->columnclear_depth;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::textureDataTable::pass_IdColumn::get() {
        return this->columnpass_Id;
    }
    
    inline ::System::Int32 NewDataSet::textureDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline nGENEFramework::NewDataSet::textureRow^  NewDataSet::textureDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<nGENEFramework::NewDataSet::textureRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::textureDataTable::AddtextureRow(nGENEFramework::NewDataSet::textureRow^  row) {
        this->Rows->Add(row);
    }
    
    inline nGENEFramework::NewDataSet::textureRow^  NewDataSet::textureDataTable::AddtextureRow(
                System::String^  name, 
                System::Int32 sampler, 
                System::String^  file, 
                System::String^  filter_min, 
                System::String^  filter_mag, 
                System::String^  filter_mip, 
                System::String^  addressing_mode, 
                System::String^  format, 
                System::String^  usage, 
                System::String^  height_ratio, 
                System::String^  width_ratio, 
                System::Boolean bind_as_texture, 
                System::Boolean clear_target, 
                System::Boolean clear_depth, 
                nGENEFramework::NewDataSet::passRow^  parentpassRowBypass_texture) {
        nGENEFramework::NewDataSet::textureRow^  rowtextureRow = (cli::safe_cast<nGENEFramework::NewDataSet::textureRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(15) {name, sampler, file, 
            filter_min, filter_mag, filter_mip, addressing_mode, format, usage, height_ratio, width_ratio, bind_as_texture, clear_target, 
            clear_depth, nullptr};
        if (parentpassRowBypass_texture != nullptr) {
            columnValuesArray[14] = parentpassRowBypass_texture[3];
        }
        rowtextureRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowtextureRow);
        return rowtextureRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::textureDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::textureDataTable::Clone() {
        nGENEFramework::NewDataSet::textureDataTable^  cln = (cli::safe_cast<nGENEFramework::NewDataSet::textureDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::textureDataTable::CreateInstance() {
        return (gcnew nGENEFramework::NewDataSet::textureDataTable());
    }
    
    inline ::System::Void NewDataSet::textureDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columnsampler = __super::Columns[L"sampler"];
        this->columnfile = __super::Columns[L"file"];
        this->columnfilter_min = __super::Columns[L"filter_min"];
        this->columnfilter_mag = __super::Columns[L"filter_mag"];
        this->columnfilter_mip = __super::Columns[L"filter_mip"];
        this->columnaddressing_mode = __super::Columns[L"addressing_mode"];
        this->columnformat = __super::Columns[L"format"];
        this->columnusage = __super::Columns[L"usage"];
        this->columnheight_ratio = __super::Columns[L"height_ratio"];
        this->columnwidth_ratio = __super::Columns[L"width_ratio"];
        this->columnbind_as_texture = __super::Columns[L"bind_as_texture"];
        this->columnclear_target = __super::Columns[L"clear_target"];
        this->columnclear_depth = __super::Columns[L"clear_depth"];
        this->columnpass_Id = __super::Columns[L"pass_Id"];
    }
    
    inline ::System::Void NewDataSet::textureDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnsampler = (gcnew ::System::Data::DataColumn(L"sampler", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnsampler);
        this->columnfile = (gcnew ::System::Data::DataColumn(L"file", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfile);
        this->columnfilter_min = (gcnew ::System::Data::DataColumn(L"filter_min", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfilter_min);
        this->columnfilter_mag = (gcnew ::System::Data::DataColumn(L"filter_mag", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfilter_mag);
        this->columnfilter_mip = (gcnew ::System::Data::DataColumn(L"filter_mip", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfilter_mip);
        this->columnaddressing_mode = (gcnew ::System::Data::DataColumn(L"addressing_mode", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnaddressing_mode);
        this->columnformat = (gcnew ::System::Data::DataColumn(L"format", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnformat);
        this->columnusage = (gcnew ::System::Data::DataColumn(L"usage", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnusage);
        this->columnheight_ratio = (gcnew ::System::Data::DataColumn(L"height_ratio", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnheight_ratio);
        this->columnwidth_ratio = (gcnew ::System::Data::DataColumn(L"width_ratio", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnwidth_ratio);
        this->columnbind_as_texture = (gcnew ::System::Data::DataColumn(L"bind_as_texture", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnbind_as_texture);
        this->columnclear_target = (gcnew ::System::Data::DataColumn(L"clear_target", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnclear_target);
        this->columnclear_depth = (gcnew ::System::Data::DataColumn(L"clear_depth", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnclear_depth);
        this->columnpass_Id = (gcnew ::System::Data::DataColumn(L"pass_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnpass_Id);
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columnsampler->AllowDBNull = false;
        this->columnsampler->Namespace = L"";
        this->columnfile->Namespace = L"";
        this->columnfilter_min->Namespace = L"";
        this->columnfilter_mag->Namespace = L"";
        this->columnfilter_mip->Namespace = L"";
        this->columnaddressing_mode->Namespace = L"";
        this->columnformat->Namespace = L"";
        this->columnusage->Namespace = L"";
        this->columnheight_ratio->Namespace = L"";
        this->columnwidth_ratio->Namespace = L"";
        this->columnbind_as_texture->Namespace = L"";
        this->columnclear_target->Namespace = L"";
        this->columnclear_depth->Namespace = L"";
    }
    
    inline nGENEFramework::NewDataSet::textureRow^  NewDataSet::textureDataTable::NewtextureRow() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::textureRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::textureDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew nGENEFramework::NewDataSet::textureRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::textureDataTable::GetRowType() {
        return nGENEFramework::NewDataSet::textureRow::typeid;
    }
    
    inline ::System::Void NewDataSet::textureDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->textureRowChanged(this, (gcnew nGENEFramework::NewDataSet::textureRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::textureRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::textureDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->textureRowChanging(this, (gcnew nGENEFramework::NewDataSet::textureRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::textureRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::textureDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->textureRowDeleted(this, (gcnew nGENEFramework::NewDataSet::textureRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::textureRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::textureDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->textureRowDeleting(this, (gcnew nGENEFramework::NewDataSet::textureRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::textureRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::textureDataTable::RemovetextureRow(nGENEFramework::NewDataSet::textureRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::textureDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        nGENEFramework::NewDataSet^  ds = (gcnew nGENEFramework::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"textureDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::vertex_shaderDataTable::vertex_shaderDataTable() {
        this->TableName = L"vertex_shader";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::vertex_shaderDataTable::vertex_shaderDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::vertex_shaderDataTable::vertex_shaderDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::vertex_shaderDataTable::fileColumn::get() {
        return this->columnfile;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::vertex_shaderDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::vertex_shaderDataTable::profileColumn::get() {
        return this->columnprofile;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::vertex_shaderDataTable::functionColumn::get() {
        return this->columnfunction;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::vertex_shaderDataTable::definesColumn::get() {
        return this->columndefines;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::vertex_shaderDataTable::vertex_shader_IdColumn::get() {
        return this->columnvertex_shader_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::vertex_shaderDataTable::pass_IdColumn::get() {
        return this->columnpass_Id;
    }
    
    inline ::System::Int32 NewDataSet::vertex_shaderDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline nGENEFramework::NewDataSet::vertex_shaderRow^  NewDataSet::vertex_shaderDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<nGENEFramework::NewDataSet::vertex_shaderRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::vertex_shaderDataTable::Addvertex_shaderRow(nGENEFramework::NewDataSet::vertex_shaderRow^  row) {
        this->Rows->Add(row);
    }
    
    inline nGENEFramework::NewDataSet::vertex_shaderRow^  NewDataSet::vertex_shaderDataTable::Addvertex_shaderRow(
                System::String^  file, 
                System::String^  name, 
                System::String^  profile, 
                System::String^  function, 
                System::String^  defines, 
                nGENEFramework::NewDataSet::passRow^  parentpassRowBypass_vertex_shader) {
        nGENEFramework::NewDataSet::vertex_shaderRow^  rowvertex_shaderRow = (cli::safe_cast<nGENEFramework::NewDataSet::vertex_shaderRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {file, name, profile, 
            function, defines, nullptr, nullptr};
        if (parentpassRowBypass_vertex_shader != nullptr) {
            columnValuesArray[6] = parentpassRowBypass_vertex_shader[3];
        }
        rowvertex_shaderRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowvertex_shaderRow);
        return rowvertex_shaderRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::vertex_shaderDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::vertex_shaderDataTable::Clone() {
        nGENEFramework::NewDataSet::vertex_shaderDataTable^  cln = (cli::safe_cast<nGENEFramework::NewDataSet::vertex_shaderDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::vertex_shaderDataTable::CreateInstance() {
        return (gcnew nGENEFramework::NewDataSet::vertex_shaderDataTable());
    }
    
    inline ::System::Void NewDataSet::vertex_shaderDataTable::InitVars() {
        this->columnfile = __super::Columns[L"file"];
        this->columnname = __super::Columns[L"name"];
        this->columnprofile = __super::Columns[L"profile"];
        this->columnfunction = __super::Columns[L"function"];
        this->columndefines = __super::Columns[L"defines"];
        this->columnvertex_shader_Id = __super::Columns[L"vertex_shader_Id"];
        this->columnpass_Id = __super::Columns[L"pass_Id"];
    }
    
    inline ::System::Void NewDataSet::vertex_shaderDataTable::InitClass() {
        this->columnfile = (gcnew ::System::Data::DataColumn(L"file", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfile);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnprofile = (gcnew ::System::Data::DataColumn(L"profile", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnprofile);
        this->columnfunction = (gcnew ::System::Data::DataColumn(L"function", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfunction);
        this->columndefines = (gcnew ::System::Data::DataColumn(L"defines", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndefines);
        this->columnvertex_shader_Id = (gcnew ::System::Data::DataColumn(L"vertex_shader_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnvertex_shader_Id);
        this->columnpass_Id = (gcnew ::System::Data::DataColumn(L"pass_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnpass_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnvertex_shader_Id}, 
                true)));
        this->columnfile->AllowDBNull = false;
        this->columnfile->Namespace = L"";
        this->columnname->Namespace = L"";
        this->columnprofile->Namespace = L"";
        this->columnfunction->Namespace = L"";
        this->columndefines->Namespace = L"";
        this->columnvertex_shader_Id->AutoIncrement = true;
        this->columnvertex_shader_Id->AllowDBNull = false;
        this->columnvertex_shader_Id->Unique = true;
    }
    
    inline nGENEFramework::NewDataSet::vertex_shaderRow^  NewDataSet::vertex_shaderDataTable::Newvertex_shaderRow() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::vertex_shaderRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::vertex_shaderDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew nGENEFramework::NewDataSet::vertex_shaderRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::vertex_shaderDataTable::GetRowType() {
        return nGENEFramework::NewDataSet::vertex_shaderRow::typeid;
    }
    
    inline ::System::Void NewDataSet::vertex_shaderDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->vertex_shaderRowChanged(this, (gcnew nGENEFramework::NewDataSet::vertex_shaderRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::vertex_shaderRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::vertex_shaderDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->vertex_shaderRowChanging(this, (gcnew nGENEFramework::NewDataSet::vertex_shaderRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::vertex_shaderRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::vertex_shaderDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->vertex_shaderRowDeleted(this, (gcnew nGENEFramework::NewDataSet::vertex_shaderRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::vertex_shaderRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::vertex_shaderDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->vertex_shaderRowDeleting(this, (gcnew nGENEFramework::NewDataSet::vertex_shaderRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::vertex_shaderRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::vertex_shaderDataTable::Removevertex_shaderRow(nGENEFramework::NewDataSet::vertex_shaderRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::vertex_shaderDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        nGENEFramework::NewDataSet^  ds = (gcnew nGENEFramework::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"vertex_shaderDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::constantDataTable::constantDataTable() {
        this->TableName = L"constant";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::constantDataTable::constantDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::constantDataTable::constantDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::constantDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::constantDataTable::typeColumn::get() {
        return this->columntype;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::constantDataTable::semanticColumn::get() {
        return this->columnsemantic;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::constantDataTable::dynamicColumn::get() {
        return this->columndynamic;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::constantDataTable::vertex_shader_IdColumn::get() {
        return this->columnvertex_shader_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::constantDataTable::geometry_shader_IdColumn::get() {
        return this->columngeometry_shader_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::constantDataTable::pixel_shader_IdColumn::get() {
        return this->columnpixel_shader_Id;
    }
    
    inline ::System::Int32 NewDataSet::constantDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline nGENEFramework::NewDataSet::constantRow^  NewDataSet::constantDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<nGENEFramework::NewDataSet::constantRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::constantDataTable::AddconstantRow(nGENEFramework::NewDataSet::constantRow^  row) {
        this->Rows->Add(row);
    }
    
    inline nGENEFramework::NewDataSet::constantRow^  NewDataSet::constantDataTable::AddconstantRow(
                System::String^  name, 
                System::String^  type, 
                System::String^  semantic, 
                System::Boolean dynamic, 
                nGENEFramework::NewDataSet::vertex_shaderRow^  parentvertex_shaderRowByvertex_shader_constant, 
                nGENEFramework::NewDataSet::geometry_shaderRow^  parentgeometry_shaderRowBygeometry_shader_constant, 
                nGENEFramework::NewDataSet::pixel_shaderRow^  parentpixel_shaderRowBypixel_shader_constant) {
        nGENEFramework::NewDataSet::constantRow^  rowconstantRow = (cli::safe_cast<nGENEFramework::NewDataSet::constantRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {name, type, semantic, 
            dynamic, nullptr, nullptr, nullptr};
        if (parentvertex_shaderRowByvertex_shader_constant != nullptr) {
            columnValuesArray[4] = parentvertex_shaderRowByvertex_shader_constant[5];
        }
        if (parentgeometry_shaderRowBygeometry_shader_constant != nullptr) {
            columnValuesArray[5] = parentgeometry_shaderRowBygeometry_shader_constant[5];
        }
        if (parentpixel_shaderRowBypixel_shader_constant != nullptr) {
            columnValuesArray[6] = parentpixel_shaderRowBypixel_shader_constant[5];
        }
        rowconstantRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowconstantRow);
        return rowconstantRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::constantDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::constantDataTable::Clone() {
        nGENEFramework::NewDataSet::constantDataTable^  cln = (cli::safe_cast<nGENEFramework::NewDataSet::constantDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::constantDataTable::CreateInstance() {
        return (gcnew nGENEFramework::NewDataSet::constantDataTable());
    }
    
    inline ::System::Void NewDataSet::constantDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columntype = __super::Columns[L"type"];
        this->columnsemantic = __super::Columns[L"semantic"];
        this->columndynamic = __super::Columns[L"dynamic"];
        this->columnvertex_shader_Id = __super::Columns[L"vertex_shader_Id"];
        this->columngeometry_shader_Id = __super::Columns[L"geometry_shader_Id"];
        this->columnpixel_shader_Id = __super::Columns[L"pixel_shader_Id"];
    }
    
    inline ::System::Void NewDataSet::constantDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columntype = (gcnew ::System::Data::DataColumn(L"type", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntype);
        this->columnsemantic = (gcnew ::System::Data::DataColumn(L"semantic", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnsemantic);
        this->columndynamic = (gcnew ::System::Data::DataColumn(L"dynamic", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndynamic);
        this->columnvertex_shader_Id = (gcnew ::System::Data::DataColumn(L"vertex_shader_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnvertex_shader_Id);
        this->columngeometry_shader_Id = (gcnew ::System::Data::DataColumn(L"geometry_shader_Id", ::System::Int32::typeid, nullptr, 
            ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columngeometry_shader_Id);
        this->columnpixel_shader_Id = (gcnew ::System::Data::DataColumn(L"pixel_shader_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnpixel_shader_Id);
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
        this->columntype->Namespace = L"";
        this->columnsemantic->Namespace = L"";
        this->columndynamic->Namespace = L"";
    }
    
    inline nGENEFramework::NewDataSet::constantRow^  NewDataSet::constantDataTable::NewconstantRow() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::constantRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::constantDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew nGENEFramework::NewDataSet::constantRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::constantDataTable::GetRowType() {
        return nGENEFramework::NewDataSet::constantRow::typeid;
    }
    
    inline ::System::Void NewDataSet::constantDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->constantRowChanged(this, (gcnew nGENEFramework::NewDataSet::constantRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::constantRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::constantDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->constantRowChanging(this, (gcnew nGENEFramework::NewDataSet::constantRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::constantRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::constantDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->constantRowDeleted(this, (gcnew nGENEFramework::NewDataSet::constantRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::constantRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::constantDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->constantRowDeleting(this, (gcnew nGENEFramework::NewDataSet::constantRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::constantRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::constantDataTable::RemoveconstantRow(nGENEFramework::NewDataSet::constantRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::constantDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        nGENEFramework::NewDataSet^  ds = (gcnew nGENEFramework::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"constantDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::geometry_shaderDataTable::geometry_shaderDataTable() {
        this->TableName = L"geometry_shader";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::geometry_shaderDataTable::geometry_shaderDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::geometry_shaderDataTable::geometry_shaderDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::geometry_shaderDataTable::fileColumn::get() {
        return this->columnfile;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::geometry_shaderDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::geometry_shaderDataTable::profileColumn::get() {
        return this->columnprofile;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::geometry_shaderDataTable::functionColumn::get() {
        return this->columnfunction;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::geometry_shaderDataTable::definesColumn::get() {
        return this->columndefines;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::geometry_shaderDataTable::geometry_shader_IdColumn::get() {
        return this->columngeometry_shader_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::geometry_shaderDataTable::pass_IdColumn::get() {
        return this->columnpass_Id;
    }
    
    inline ::System::Int32 NewDataSet::geometry_shaderDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline nGENEFramework::NewDataSet::geometry_shaderRow^  NewDataSet::geometry_shaderDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<nGENEFramework::NewDataSet::geometry_shaderRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::geometry_shaderDataTable::Addgeometry_shaderRow(nGENEFramework::NewDataSet::geometry_shaderRow^  row) {
        this->Rows->Add(row);
    }
    
    inline nGENEFramework::NewDataSet::geometry_shaderRow^  NewDataSet::geometry_shaderDataTable::Addgeometry_shaderRow(
                System::String^  file, 
                System::String^  name, 
                System::String^  profile, 
                System::String^  function, 
                System::String^  defines, 
                nGENEFramework::NewDataSet::passRow^  parentpassRowBypass_geometry_shader) {
        nGENEFramework::NewDataSet::geometry_shaderRow^  rowgeometry_shaderRow = (cli::safe_cast<nGENEFramework::NewDataSet::geometry_shaderRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {file, name, profile, 
            function, defines, nullptr, nullptr};
        if (parentpassRowBypass_geometry_shader != nullptr) {
            columnValuesArray[6] = parentpassRowBypass_geometry_shader[3];
        }
        rowgeometry_shaderRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowgeometry_shaderRow);
        return rowgeometry_shaderRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::geometry_shaderDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::geometry_shaderDataTable::Clone() {
        nGENEFramework::NewDataSet::geometry_shaderDataTable^  cln = (cli::safe_cast<nGENEFramework::NewDataSet::geometry_shaderDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::geometry_shaderDataTable::CreateInstance() {
        return (gcnew nGENEFramework::NewDataSet::geometry_shaderDataTable());
    }
    
    inline ::System::Void NewDataSet::geometry_shaderDataTable::InitVars() {
        this->columnfile = __super::Columns[L"file"];
        this->columnname = __super::Columns[L"name"];
        this->columnprofile = __super::Columns[L"profile"];
        this->columnfunction = __super::Columns[L"function"];
        this->columndefines = __super::Columns[L"defines"];
        this->columngeometry_shader_Id = __super::Columns[L"geometry_shader_Id"];
        this->columnpass_Id = __super::Columns[L"pass_Id"];
    }
    
    inline ::System::Void NewDataSet::geometry_shaderDataTable::InitClass() {
        this->columnfile = (gcnew ::System::Data::DataColumn(L"file", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfile);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnprofile = (gcnew ::System::Data::DataColumn(L"profile", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnprofile);
        this->columnfunction = (gcnew ::System::Data::DataColumn(L"function", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfunction);
        this->columndefines = (gcnew ::System::Data::DataColumn(L"defines", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndefines);
        this->columngeometry_shader_Id = (gcnew ::System::Data::DataColumn(L"geometry_shader_Id", ::System::Int32::typeid, nullptr, 
            ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columngeometry_shader_Id);
        this->columnpass_Id = (gcnew ::System::Data::DataColumn(L"pass_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnpass_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columngeometry_shader_Id}, 
                true)));
        this->columnfile->AllowDBNull = false;
        this->columnfile->Namespace = L"";
        this->columnname->Namespace = L"";
        this->columnprofile->Namespace = L"";
        this->columnfunction->Namespace = L"";
        this->columndefines->Namespace = L"";
        this->columngeometry_shader_Id->AutoIncrement = true;
        this->columngeometry_shader_Id->AllowDBNull = false;
        this->columngeometry_shader_Id->Unique = true;
    }
    
    inline nGENEFramework::NewDataSet::geometry_shaderRow^  NewDataSet::geometry_shaderDataTable::Newgeometry_shaderRow() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::geometry_shaderRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::geometry_shaderDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew nGENEFramework::NewDataSet::geometry_shaderRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::geometry_shaderDataTable::GetRowType() {
        return nGENEFramework::NewDataSet::geometry_shaderRow::typeid;
    }
    
    inline ::System::Void NewDataSet::geometry_shaderDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->geometry_shaderRowChanged(this, (gcnew nGENEFramework::NewDataSet::geometry_shaderRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::geometry_shaderRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::geometry_shaderDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->geometry_shaderRowChanging(this, (gcnew nGENEFramework::NewDataSet::geometry_shaderRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::geometry_shaderRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::geometry_shaderDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->geometry_shaderRowDeleted(this, (gcnew nGENEFramework::NewDataSet::geometry_shaderRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::geometry_shaderRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::geometry_shaderDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->geometry_shaderRowDeleting(this, (gcnew nGENEFramework::NewDataSet::geometry_shaderRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::geometry_shaderRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::geometry_shaderDataTable::Removegeometry_shaderRow(nGENEFramework::NewDataSet::geometry_shaderRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::geometry_shaderDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        nGENEFramework::NewDataSet^  ds = (gcnew nGENEFramework::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"geometry_shaderDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::pixel_shaderDataTable::pixel_shaderDataTable() {
        this->TableName = L"pixel_shader";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::pixel_shaderDataTable::pixel_shaderDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::pixel_shaderDataTable::pixel_shaderDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pixel_shaderDataTable::fileColumn::get() {
        return this->columnfile;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pixel_shaderDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pixel_shaderDataTable::profileColumn::get() {
        return this->columnprofile;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pixel_shaderDataTable::functionColumn::get() {
        return this->columnfunction;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pixel_shaderDataTable::definesColumn::get() {
        return this->columndefines;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pixel_shaderDataTable::pixel_shader_IdColumn::get() {
        return this->columnpixel_shader_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::pixel_shaderDataTable::pass_IdColumn::get() {
        return this->columnpass_Id;
    }
    
    inline ::System::Int32 NewDataSet::pixel_shaderDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline nGENEFramework::NewDataSet::pixel_shaderRow^  NewDataSet::pixel_shaderDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<nGENEFramework::NewDataSet::pixel_shaderRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::pixel_shaderDataTable::Addpixel_shaderRow(nGENEFramework::NewDataSet::pixel_shaderRow^  row) {
        this->Rows->Add(row);
    }
    
    inline nGENEFramework::NewDataSet::pixel_shaderRow^  NewDataSet::pixel_shaderDataTable::Addpixel_shaderRow(
                System::String^  file, 
                System::String^  name, 
                System::String^  profile, 
                System::String^  function, 
                System::String^  defines, 
                nGENEFramework::NewDataSet::passRow^  parentpassRowBypass_pixel_shader) {
        nGENEFramework::NewDataSet::pixel_shaderRow^  rowpixel_shaderRow = (cli::safe_cast<nGENEFramework::NewDataSet::pixel_shaderRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(7) {file, name, profile, 
            function, defines, nullptr, nullptr};
        if (parentpassRowBypass_pixel_shader != nullptr) {
            columnValuesArray[6] = parentpassRowBypass_pixel_shader[3];
        }
        rowpixel_shaderRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowpixel_shaderRow);
        return rowpixel_shaderRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::pixel_shaderDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::pixel_shaderDataTable::Clone() {
        nGENEFramework::NewDataSet::pixel_shaderDataTable^  cln = (cli::safe_cast<nGENEFramework::NewDataSet::pixel_shaderDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::pixel_shaderDataTable::CreateInstance() {
        return (gcnew nGENEFramework::NewDataSet::pixel_shaderDataTable());
    }
    
    inline ::System::Void NewDataSet::pixel_shaderDataTable::InitVars() {
        this->columnfile = __super::Columns[L"file"];
        this->columnname = __super::Columns[L"name"];
        this->columnprofile = __super::Columns[L"profile"];
        this->columnfunction = __super::Columns[L"function"];
        this->columndefines = __super::Columns[L"defines"];
        this->columnpixel_shader_Id = __super::Columns[L"pixel_shader_Id"];
        this->columnpass_Id = __super::Columns[L"pass_Id"];
    }
    
    inline ::System::Void NewDataSet::pixel_shaderDataTable::InitClass() {
        this->columnfile = (gcnew ::System::Data::DataColumn(L"file", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfile);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columnprofile = (gcnew ::System::Data::DataColumn(L"profile", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnprofile);
        this->columnfunction = (gcnew ::System::Data::DataColumn(L"function", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfunction);
        this->columndefines = (gcnew ::System::Data::DataColumn(L"defines", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndefines);
        this->columnpixel_shader_Id = (gcnew ::System::Data::DataColumn(L"pixel_shader_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnpixel_shader_Id);
        this->columnpass_Id = (gcnew ::System::Data::DataColumn(L"pass_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnpass_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnpixel_shader_Id}, 
                true)));
        this->columnfile->AllowDBNull = false;
        this->columnfile->Namespace = L"";
        this->columnname->Namespace = L"";
        this->columnprofile->Namespace = L"";
        this->columnfunction->Namespace = L"";
        this->columndefines->Namespace = L"";
        this->columnpixel_shader_Id->AutoIncrement = true;
        this->columnpixel_shader_Id->AllowDBNull = false;
        this->columnpixel_shader_Id->Unique = true;
    }
    
    inline nGENEFramework::NewDataSet::pixel_shaderRow^  NewDataSet::pixel_shaderDataTable::Newpixel_shaderRow() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::pixel_shaderRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::pixel_shaderDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew nGENEFramework::NewDataSet::pixel_shaderRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::pixel_shaderDataTable::GetRowType() {
        return nGENEFramework::NewDataSet::pixel_shaderRow::typeid;
    }
    
    inline ::System::Void NewDataSet::pixel_shaderDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->pixel_shaderRowChanged(this, (gcnew nGENEFramework::NewDataSet::pixel_shaderRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::pixel_shaderRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::pixel_shaderDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->pixel_shaderRowChanging(this, (gcnew nGENEFramework::NewDataSet::pixel_shaderRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::pixel_shaderRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::pixel_shaderDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->pixel_shaderRowDeleted(this, (gcnew nGENEFramework::NewDataSet::pixel_shaderRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::pixel_shaderRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::pixel_shaderDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->pixel_shaderRowDeleting(this, (gcnew nGENEFramework::NewDataSet::pixel_shaderRowChangeEvent((cli::safe_cast<nGENEFramework::NewDataSet::pixel_shaderRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::pixel_shaderDataTable::Removepixel_shaderRow(nGENEFramework::NewDataSet::pixel_shaderRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::pixel_shaderDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        nGENEFramework::NewDataSet^  ds = (gcnew nGENEFramework::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"pixel_shaderDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::libraryRow::libraryRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablelibrary = (cli::safe_cast<nGENEFramework::NewDataSet::libraryDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::libraryRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablelibrary->nameColumn]));
    }
    inline System::Void NewDataSet::libraryRow::name::set(System::String^  value) {
        this[this->tablelibrary->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::libraryRow::author::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablelibrary->authorColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'author\' in table \'library\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::libraryRow::author::set(System::String^  value) {
        this[this->tablelibrary->authorColumn] = value;
    }
    
    inline System::Single NewDataSet::libraryRow::version::get() {
        return (cli::safe_cast<::System::Single >(this[this->tablelibrary->versionColumn]));
    }
    inline System::Void NewDataSet::libraryRow::version::set(System::Single value) {
        this[this->tablelibrary->versionColumn] = value;
    }
    
    inline System::Int32 NewDataSet::libraryRow::library_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablelibrary->library_IdColumn]));
    }
    inline System::Void NewDataSet::libraryRow::library_Id::set(System::Int32 value) {
        this[this->tablelibrary->library_IdColumn] = value;
    }
    
    inline ::System::Boolean NewDataSet::libraryRow::IsauthorNull() {
        return this->IsNull(this->tablelibrary->authorColumn);
    }
    
    inline ::System::Void NewDataSet::libraryRow::SetauthorNull() {
        this[this->tablelibrary->authorColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< nGENEFramework::NewDataSet::materialRow^  >^  NewDataSet::libraryRow::GetmaterialRows() {
        if (this->Table->ChildRelations[L"library_material"] == nullptr) {
            return gcnew cli::array< nGENEFramework::NewDataSet::materialRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< nGENEFramework::NewDataSet::materialRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"library_material"])));
        }
    }
    
    
    inline NewDataSet::materialRow::materialRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablematerial = (cli::safe_cast<nGENEFramework::NewDataSet::materialDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::materialRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablematerial->nameColumn]));
    }
    inline System::Void NewDataSet::materialRow::name::set(System::String^  value) {
        this[this->tablematerial->nameColumn] = value;
    }
    
    inline System::Boolean NewDataSet::materialRow::alpha_test::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tablematerial->alpha_testColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'alpha_test\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::alpha_test::set(System::Boolean value) {
        this[this->tablematerial->alpha_testColumn] = value;
    }
    
    inline System::Int32 NewDataSet::materialRow::alpha_test_ref::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablematerial->alpha_test_refColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'alpha_test_ref\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::alpha_test_ref::set(System::Int32 value) {
        this[this->tablematerial->alpha_test_refColumn] = value;
    }
    
    inline System::Int32 NewDataSet::materialRow::src_blend::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablematerial->src_blendColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'src_blend\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::src_blend::set(System::Int32 value) {
        this[this->tablematerial->src_blendColumn] = value;
    }
    
    inline System::Int32 NewDataSet::materialRow::dest_blend::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablematerial->dest_blendColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'dest_blend\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::dest_blend::set(System::Int32 value) {
        this[this->tablematerial->dest_blendColumn] = value;
    }
    
    inline System::String^  NewDataSet::materialRow::order::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablematerial->orderColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'order\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::order::set(System::String^  value) {
        this[this->tablematerial->orderColumn] = value;
    }
    
    inline System::Boolean NewDataSet::materialRow::transparent::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tablematerial->transparentColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'transparent\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::transparent::set(System::Boolean value) {
        this[this->tablematerial->transparentColumn] = value;
    }
    
    inline System::Boolean NewDataSet::materialRow::lightable::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tablematerial->lightableColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'lightable\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::lightable::set(System::Boolean value) {
        this[this->tablematerial->lightableColumn] = value;
    }
    
    inline System::Boolean NewDataSet::materialRow::two_sided::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tablematerial->two_sidedColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'two_sided\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::two_sided::set(System::Boolean value) {
        this[this->tablematerial->two_sidedColumn] = value;
    }
    
    inline System::Single NewDataSet::materialRow::z_bias::get() {
        try {
            return (cli::safe_cast<::System::Single >(this[this->tablematerial->z_biasColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'z_bias\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::z_bias::set(System::Single value) {
        this[this->tablematerial->z_biasColumn] = value;
    }
    
    inline System::Boolean NewDataSet::materialRow::z_write::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tablematerial->z_writeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'z_write\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::z_write::set(System::Boolean value) {
        this[this->tablematerial->z_writeColumn] = value;
    }
    
    inline System::Boolean NewDataSet::materialRow::cast_shadow::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tablematerial->cast_shadowColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'cast_shadow\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::cast_shadow::set(System::Boolean value) {
        this[this->tablematerial->cast_shadowColumn] = value;
    }
    
    inline System::Single NewDataSet::materialRow::emissive_factor::get() {
        try {
            return (cli::safe_cast<::System::Single >(this[this->tablematerial->emissive_factorColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'emissive_factor\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::emissive_factor::set(System::Single value) {
        this[this->tablematerial->emissive_factorColumn] = value;
    }
    
    inline System::String^  NewDataSet::materialRow::ambient::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablematerial->ambientColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ambient\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::ambient::set(System::String^  value) {
        this[this->tablematerial->ambientColumn] = value;
    }
    
    inline System::String^  NewDataSet::materialRow::diffuse::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablematerial->diffuseColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'diffuse\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::diffuse::set(System::String^  value) {
        this[this->tablematerial->diffuseColumn] = value;
    }
    
    inline System::String^  NewDataSet::materialRow::specular::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablematerial->specularColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'specular\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::specular::set(System::String^  value) {
        this[this->tablematerial->specularColumn] = value;
    }
    
    inline System::String^  NewDataSet::materialRow::fill_mode::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablematerial->fill_modeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'fill_mode\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::fill_mode::set(System::String^  value) {
        this[this->tablematerial->fill_modeColumn] = value;
    }
    
    inline System::Int32 NewDataSet::materialRow::material_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablematerial->material_IdColumn]));
    }
    inline System::Void NewDataSet::materialRow::material_Id::set(System::Int32 value) {
        this[this->tablematerial->material_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::materialRow::library_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablematerial->library_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'library_Id\' in table \'material\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::materialRow::library_Id::set(System::Int32 value) {
        this[this->tablematerial->library_IdColumn] = value;
    }
    
    inline nGENEFramework::NewDataSet::libraryRow^  NewDataSet::materialRow::libraryRow::get() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::libraryRow^  >(this->GetParentRow(this->Table->ParentRelations[L"library_material"])));
    }
    inline System::Void NewDataSet::materialRow::libraryRow::set(nGENEFramework::NewDataSet::libraryRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"library_material"]);
    }
    
    inline ::System::Boolean NewDataSet::materialRow::Isalpha_testNull() {
        return this->IsNull(this->tablematerial->alpha_testColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::Setalpha_testNull() {
        this[this->tablematerial->alpha_testColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::materialRow::Isalpha_test_refNull() {
        return this->IsNull(this->tablematerial->alpha_test_refColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::Setalpha_test_refNull() {
        this[this->tablematerial->alpha_test_refColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::materialRow::Issrc_blendNull() {
        return this->IsNull(this->tablematerial->src_blendColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::Setsrc_blendNull() {
        this[this->tablematerial->src_blendColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::materialRow::Isdest_blendNull() {
        return this->IsNull(this->tablematerial->dest_blendColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::Setdest_blendNull() {
        this[this->tablematerial->dest_blendColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::materialRow::IsorderNull() {
        return this->IsNull(this->tablematerial->orderColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::SetorderNull() {
        this[this->tablematerial->orderColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::materialRow::IstransparentNull() {
        return this->IsNull(this->tablematerial->transparentColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::SettransparentNull() {
        this[this->tablematerial->transparentColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::materialRow::IslightableNull() {
        return this->IsNull(this->tablematerial->lightableColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::SetlightableNull() {
        this[this->tablematerial->lightableColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::materialRow::Istwo_sidedNull() {
        return this->IsNull(this->tablematerial->two_sidedColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::Settwo_sidedNull() {
        this[this->tablematerial->two_sidedColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::materialRow::Isz_biasNull() {
        return this->IsNull(this->tablematerial->z_biasColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::Setz_biasNull() {
        this[this->tablematerial->z_biasColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::materialRow::Isz_writeNull() {
        return this->IsNull(this->tablematerial->z_writeColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::Setz_writeNull() {
        this[this->tablematerial->z_writeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::materialRow::Iscast_shadowNull() {
        return this->IsNull(this->tablematerial->cast_shadowColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::Setcast_shadowNull() {
        this[this->tablematerial->cast_shadowColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::materialRow::Isemissive_factorNull() {
        return this->IsNull(this->tablematerial->emissive_factorColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::Setemissive_factorNull() {
        this[this->tablematerial->emissive_factorColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::materialRow::IsambientNull() {
        return this->IsNull(this->tablematerial->ambientColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::SetambientNull() {
        this[this->tablematerial->ambientColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::materialRow::IsdiffuseNull() {
        return this->IsNull(this->tablematerial->diffuseColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::SetdiffuseNull() {
        this[this->tablematerial->diffuseColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::materialRow::IsspecularNull() {
        return this->IsNull(this->tablematerial->specularColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::SetspecularNull() {
        this[this->tablematerial->specularColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::materialRow::Isfill_modeNull() {
        return this->IsNull(this->tablematerial->fill_modeColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::Setfill_modeNull() {
        this[this->tablematerial->fill_modeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::materialRow::Islibrary_IdNull() {
        return this->IsNull(this->tablematerial->library_IdColumn);
    }
    
    inline ::System::Void NewDataSet::materialRow::Setlibrary_IdNull() {
        this[this->tablematerial->library_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< nGENEFramework::NewDataSet::passRow^  >^  NewDataSet::materialRow::GetpassRows() {
        if (this->Table->ChildRelations[L"material_pass"] == nullptr) {
            return gcnew cli::array< nGENEFramework::NewDataSet::passRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< nGENEFramework::NewDataSet::passRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"material_pass"])));
        }
    }
    
    
    inline NewDataSet::passRow::passRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablepass = (cli::safe_cast<nGENEFramework::NewDataSet::passDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::passRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablepass->nameColumn]));
    }
    inline System::Void NewDataSet::passRow::name::set(System::String^  value) {
        this[this->tablepass->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::passRow::order::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablepass->orderColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'order\' in table \'pass\' is DBNull.", e));
        }
    }
    inline System::Void NewDataSet::passRow::order::set(System::String^  value) {
        this[this->tablepass->orderColumn] = value;
    }
    
    inline System::Int32 NewDataSet::passRow::run_count::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablepass->run_countColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'run_count\' in table \'pass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::passRow::run_count::set(System::Int32 value) {
        this[this->tablepass->run_countColumn] = value;
    }
    
    inline System::Int32 NewDataSet::passRow::pass_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablepass->pass_IdColumn]));
    }
    inline System::Void NewDataSet::passRow::pass_Id::set(System::Int32 value) {
        this[this->tablepass->pass_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::passRow::material_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablepass->material_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'material_Id\' in table \'pass\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::passRow::material_Id::set(System::Int32 value) {
        this[this->tablepass->material_IdColumn] = value;
    }
    
    inline nGENEFramework::NewDataSet::materialRow^  NewDataSet::passRow::materialRow::get() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::materialRow^  >(this->GetParentRow(this->Table->ParentRelations[L"material_pass"])));
    }
    inline System::Void NewDataSet::passRow::materialRow::set(nGENEFramework::NewDataSet::materialRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"material_pass"]);
    }
    
    inline ::System::Boolean NewDataSet::passRow::IsorderNull() {
        return this->IsNull(this->tablepass->orderColumn);
    }
    
    inline ::System::Void NewDataSet::passRow::SetorderNull() {
        this[this->tablepass->orderColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::passRow::Isrun_countNull() {
        return this->IsNull(this->tablepass->run_countColumn);
    }
    
    inline ::System::Void NewDataSet::passRow::Setrun_countNull() {
        this[this->tablepass->run_countColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::passRow::Ismaterial_IdNull() {
        return this->IsNull(this->tablepass->material_IdColumn);
    }
    
    inline ::System::Void NewDataSet::passRow::Setmaterial_IdNull() {
        this[this->tablepass->material_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< nGENEFramework::NewDataSet::textureRow^  >^  NewDataSet::passRow::GettextureRows() {
        if (this->Table->ChildRelations[L"pass_texture"] == nullptr) {
            return gcnew cli::array< nGENEFramework::NewDataSet::textureRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< nGENEFramework::NewDataSet::textureRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"pass_texture"])));
        }
    }
    
    inline cli::array< nGENEFramework::NewDataSet::vertex_shaderRow^  >^  NewDataSet::passRow::Getvertex_shaderRows() {
        if (this->Table->ChildRelations[L"pass_vertex_shader"] == nullptr) {
            return gcnew cli::array< nGENEFramework::NewDataSet::vertex_shaderRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< nGENEFramework::NewDataSet::vertex_shaderRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"pass_vertex_shader"])));
        }
    }
    
    inline cli::array< nGENEFramework::NewDataSet::geometry_shaderRow^  >^  NewDataSet::passRow::Getgeometry_shaderRows() {
        if (this->Table->ChildRelations[L"pass_geometry_shader"] == nullptr) {
            return gcnew cli::array< nGENEFramework::NewDataSet::geometry_shaderRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< nGENEFramework::NewDataSet::geometry_shaderRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"pass_geometry_shader"])));
        }
    }
    
    inline cli::array< nGENEFramework::NewDataSet::pixel_shaderRow^  >^  NewDataSet::passRow::Getpixel_shaderRows() {
        if (this->Table->ChildRelations[L"pass_pixel_shader"] == nullptr) {
            return gcnew cli::array< nGENEFramework::NewDataSet::pixel_shaderRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< nGENEFramework::NewDataSet::pixel_shaderRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"pass_pixel_shader"])));
        }
    }
    
    
    inline NewDataSet::textureRow::textureRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tabletexture = (cli::safe_cast<nGENEFramework::NewDataSet::textureDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::textureRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tabletexture->nameColumn]));
    }
    inline System::Void NewDataSet::textureRow::name::set(System::String^  value) {
        this[this->tabletexture->nameColumn] = value;
    }
    
    inline System::Int32 NewDataSet::textureRow::sampler::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tabletexture->samplerColumn]));
    }
    inline System::Void NewDataSet::textureRow::sampler::set(System::Int32 value) {
        this[this->tabletexture->samplerColumn] = value;
    }
    
    inline System::String^  NewDataSet::textureRow::file::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tabletexture->fileColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'file\' in table \'texture\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::textureRow::file::set(System::String^  value) {
        this[this->tabletexture->fileColumn] = value;
    }
    
    inline System::String^  NewDataSet::textureRow::filter_min::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tabletexture->filter_minColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'filter_min\' in table \'texture\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::textureRow::filter_min::set(System::String^  value) {
        this[this->tabletexture->filter_minColumn] = value;
    }
    
    inline System::String^  NewDataSet::textureRow::filter_mag::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tabletexture->filter_magColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'filter_mag\' in table \'texture\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::textureRow::filter_mag::set(System::String^  value) {
        this[this->tabletexture->filter_magColumn] = value;
    }
    
    inline System::String^  NewDataSet::textureRow::filter_mip::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tabletexture->filter_mipColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'filter_mip\' in table \'texture\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::textureRow::filter_mip::set(System::String^  value) {
        this[this->tabletexture->filter_mipColumn] = value;
    }
    
    inline System::String^  NewDataSet::textureRow::addressing_mode::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tabletexture->addressing_modeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'addressing_mode\' in table \'texture\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::textureRow::addressing_mode::set(System::String^  value) {
        this[this->tabletexture->addressing_modeColumn] = value;
    }
    
    inline System::String^  NewDataSet::textureRow::format::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tabletexture->formatColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'format\' in table \'texture\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::textureRow::format::set(System::String^  value) {
        this[this->tabletexture->formatColumn] = value;
    }
    
    inline System::String^  NewDataSet::textureRow::usage::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tabletexture->usageColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'usage\' in table \'texture\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::textureRow::usage::set(System::String^  value) {
        this[this->tabletexture->usageColumn] = value;
    }
    
    inline System::String^  NewDataSet::textureRow::height_ratio::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tabletexture->height_ratioColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'height_ratio\' in table \'texture\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::textureRow::height_ratio::set(System::String^  value) {
        this[this->tabletexture->height_ratioColumn] = value;
    }
    
    inline System::String^  NewDataSet::textureRow::width_ratio::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tabletexture->width_ratioColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'width_ratio\' in table \'texture\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::textureRow::width_ratio::set(System::String^  value) {
        this[this->tabletexture->width_ratioColumn] = value;
    }
    
    inline System::Boolean NewDataSet::textureRow::bind_as_texture::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tabletexture->bind_as_textureColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'bind_as_texture\' in table \'texture\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::textureRow::bind_as_texture::set(System::Boolean value) {
        this[this->tabletexture->bind_as_textureColumn] = value;
    }
    
    inline System::Boolean NewDataSet::textureRow::clear_target::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tabletexture->clear_targetColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'clear_target\' in table \'texture\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::textureRow::clear_target::set(System::Boolean value) {
        this[this->tabletexture->clear_targetColumn] = value;
    }
    
    inline System::Boolean NewDataSet::textureRow::clear_depth::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tabletexture->clear_depthColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'clear_depth\' in table \'texture\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::textureRow::clear_depth::set(System::Boolean value) {
        this[this->tabletexture->clear_depthColumn] = value;
    }
    
    inline System::Int32 NewDataSet::textureRow::pass_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tabletexture->pass_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'pass_Id\' in table \'texture\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::textureRow::pass_Id::set(System::Int32 value) {
        this[this->tabletexture->pass_IdColumn] = value;
    }
    
    inline nGENEFramework::NewDataSet::passRow^  NewDataSet::textureRow::passRow::get() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::passRow^  >(this->GetParentRow(this->Table->ParentRelations[L"pass_texture"])));
    }
    inline System::Void NewDataSet::textureRow::passRow::set(nGENEFramework::NewDataSet::passRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"pass_texture"]);
    }
    
    inline ::System::Boolean NewDataSet::textureRow::IsfileNull() {
        return this->IsNull(this->tabletexture->fileColumn);
    }
    
    inline ::System::Void NewDataSet::textureRow::SetfileNull() {
        this[this->tabletexture->fileColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::textureRow::Isfilter_minNull() {
        return this->IsNull(this->tabletexture->filter_minColumn);
    }
    
    inline ::System::Void NewDataSet::textureRow::Setfilter_minNull() {
        this[this->tabletexture->filter_minColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::textureRow::Isfilter_magNull() {
        return this->IsNull(this->tabletexture->filter_magColumn);
    }
    
    inline ::System::Void NewDataSet::textureRow::Setfilter_magNull() {
        this[this->tabletexture->filter_magColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::textureRow::Isfilter_mipNull() {
        return this->IsNull(this->tabletexture->filter_mipColumn);
    }
    
    inline ::System::Void NewDataSet::textureRow::Setfilter_mipNull() {
        this[this->tabletexture->filter_mipColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::textureRow::Isaddressing_modeNull() {
        return this->IsNull(this->tabletexture->addressing_modeColumn);
    }
    
    inline ::System::Void NewDataSet::textureRow::Setaddressing_modeNull() {
        this[this->tabletexture->addressing_modeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::textureRow::IsformatNull() {
        return this->IsNull(this->tabletexture->formatColumn);
    }
    
    inline ::System::Void NewDataSet::textureRow::SetformatNull() {
        this[this->tabletexture->formatColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::textureRow::IsusageNull() {
        return this->IsNull(this->tabletexture->usageColumn);
    }
    
    inline ::System::Void NewDataSet::textureRow::SetusageNull() {
        this[this->tabletexture->usageColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::textureRow::Isheight_ratioNull() {
        return this->IsNull(this->tabletexture->height_ratioColumn);
    }
    
    inline ::System::Void NewDataSet::textureRow::Setheight_ratioNull() {
        this[this->tabletexture->height_ratioColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::textureRow::Iswidth_ratioNull() {
        return this->IsNull(this->tabletexture->width_ratioColumn);
    }
    
    inline ::System::Void NewDataSet::textureRow::Setwidth_ratioNull() {
        this[this->tabletexture->width_ratioColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::textureRow::Isbind_as_textureNull() {
        return this->IsNull(this->tabletexture->bind_as_textureColumn);
    }
    
    inline ::System::Void NewDataSet::textureRow::Setbind_as_textureNull() {
        this[this->tabletexture->bind_as_textureColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::textureRow::Isclear_targetNull() {
        return this->IsNull(this->tabletexture->clear_targetColumn);
    }
    
    inline ::System::Void NewDataSet::textureRow::Setclear_targetNull() {
        this[this->tabletexture->clear_targetColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::textureRow::Isclear_depthNull() {
        return this->IsNull(this->tabletexture->clear_depthColumn);
    }
    
    inline ::System::Void NewDataSet::textureRow::Setclear_depthNull() {
        this[this->tabletexture->clear_depthColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::textureRow::Ispass_IdNull() {
        return this->IsNull(this->tabletexture->pass_IdColumn);
    }
    
    inline ::System::Void NewDataSet::textureRow::Setpass_IdNull() {
        this[this->tabletexture->pass_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::vertex_shaderRow::vertex_shaderRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablevertex_shader = (cli::safe_cast<nGENEFramework::NewDataSet::vertex_shaderDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::vertex_shaderRow::file::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablevertex_shader->fileColumn]));
    }
    inline System::Void NewDataSet::vertex_shaderRow::file::set(System::String^  value) {
        this[this->tablevertex_shader->fileColumn] = value;
    }
    
    inline System::String^  NewDataSet::vertex_shaderRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablevertex_shader->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'vertex_shader\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::vertex_shaderRow::name::set(System::String^  value) {
        this[this->tablevertex_shader->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::vertex_shaderRow::profile::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablevertex_shader->profileColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'profile\' in table \'vertex_shader\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::vertex_shaderRow::profile::set(System::String^  value) {
        this[this->tablevertex_shader->profileColumn] = value;
    }
    
    inline System::String^  NewDataSet::vertex_shaderRow::function::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablevertex_shader->functionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'function\' in table \'vertex_shader\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::vertex_shaderRow::function::set(System::String^  value) {
        this[this->tablevertex_shader->functionColumn] = value;
    }
    
    inline System::String^  NewDataSet::vertex_shaderRow::defines::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablevertex_shader->definesColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'defines\' in table \'vertex_shader\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::vertex_shaderRow::defines::set(System::String^  value) {
        this[this->tablevertex_shader->definesColumn] = value;
    }
    
    inline System::Int32 NewDataSet::vertex_shaderRow::vertex_shader_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablevertex_shader->vertex_shader_IdColumn]));
    }
    inline System::Void NewDataSet::vertex_shaderRow::vertex_shader_Id::set(System::Int32 value) {
        this[this->tablevertex_shader->vertex_shader_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::vertex_shaderRow::pass_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablevertex_shader->pass_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'pass_Id\' in table \'vertex_shader\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::vertex_shaderRow::pass_Id::set(System::Int32 value) {
        this[this->tablevertex_shader->pass_IdColumn] = value;
    }
    
    inline nGENEFramework::NewDataSet::passRow^  NewDataSet::vertex_shaderRow::passRow::get() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::passRow^  >(this->GetParentRow(this->Table->ParentRelations[L"pass_vertex_shader"])));
    }
    inline System::Void NewDataSet::vertex_shaderRow::passRow::set(nGENEFramework::NewDataSet::passRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"pass_vertex_shader"]);
    }
    
    inline ::System::Boolean NewDataSet::vertex_shaderRow::IsnameNull() {
        return this->IsNull(this->tablevertex_shader->nameColumn);
    }
    
    inline ::System::Void NewDataSet::vertex_shaderRow::SetnameNull() {
        this[this->tablevertex_shader->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::vertex_shaderRow::IsprofileNull() {
        return this->IsNull(this->tablevertex_shader->profileColumn);
    }
    
    inline ::System::Void NewDataSet::vertex_shaderRow::SetprofileNull() {
        this[this->tablevertex_shader->profileColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::vertex_shaderRow::IsfunctionNull() {
        return this->IsNull(this->tablevertex_shader->functionColumn);
    }
    
    inline ::System::Void NewDataSet::vertex_shaderRow::SetfunctionNull() {
        this[this->tablevertex_shader->functionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::vertex_shaderRow::IsdefinesNull() {
        return this->IsNull(this->tablevertex_shader->definesColumn);
    }
    
    inline ::System::Void NewDataSet::vertex_shaderRow::SetdefinesNull() {
        this[this->tablevertex_shader->definesColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::vertex_shaderRow::Ispass_IdNull() {
        return this->IsNull(this->tablevertex_shader->pass_IdColumn);
    }
    
    inline ::System::Void NewDataSet::vertex_shaderRow::Setpass_IdNull() {
        this[this->tablevertex_shader->pass_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< nGENEFramework::NewDataSet::constantRow^  >^  NewDataSet::vertex_shaderRow::GetconstantRows() {
        if (this->Table->ChildRelations[L"vertex_shader_constant"] == nullptr) {
            return gcnew cli::array< nGENEFramework::NewDataSet::constantRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< nGENEFramework::NewDataSet::constantRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"vertex_shader_constant"])));
        }
    }
    
    
    inline NewDataSet::constantRow::constantRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableconstant = (cli::safe_cast<nGENEFramework::NewDataSet::constantDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::constantRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableconstant->nameColumn]));
    }
    inline System::Void NewDataSet::constantRow::name::set(System::String^  value) {
        this[this->tableconstant->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::constantRow::type::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableconstant->typeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'type\' in table \'constant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::constantRow::type::set(System::String^  value) {
        this[this->tableconstant->typeColumn] = value;
    }
    
    inline System::String^  NewDataSet::constantRow::semantic::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tableconstant->semanticColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'semantic\' in table \'constant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::constantRow::semantic::set(System::String^  value) {
        this[this->tableconstant->semanticColumn] = value;
    }
    
    inline System::Boolean NewDataSet::constantRow::dynamic::get() {
        try {
            return (cli::safe_cast<::System::Boolean >(this[this->tableconstant->dynamicColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'dynamic\' in table \'constant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::constantRow::dynamic::set(System::Boolean value) {
        this[this->tableconstant->dynamicColumn] = value;
    }
    
    inline System::Int32 NewDataSet::constantRow::vertex_shader_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableconstant->vertex_shader_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'vertex_shader_Id\' in table \'constant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::constantRow::vertex_shader_Id::set(System::Int32 value) {
        this[this->tableconstant->vertex_shader_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::constantRow::geometry_shader_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableconstant->geometry_shader_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'geometry_shader_Id\' in table \'constant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::constantRow::geometry_shader_Id::set(System::Int32 value) {
        this[this->tableconstant->geometry_shader_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::constantRow::pixel_shader_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tableconstant->pixel_shader_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'pixel_shader_Id\' in table \'constant\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::constantRow::pixel_shader_Id::set(System::Int32 value) {
        this[this->tableconstant->pixel_shader_IdColumn] = value;
    }
    
    inline nGENEFramework::NewDataSet::vertex_shaderRow^  NewDataSet::constantRow::vertex_shaderRow::get() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::vertex_shaderRow^  >(this->GetParentRow(this->Table->ParentRelations[L"vertex_shader_constant"])));
    }
    inline System::Void NewDataSet::constantRow::vertex_shaderRow::set(nGENEFramework::NewDataSet::vertex_shaderRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"vertex_shader_constant"]);
    }
    
    inline nGENEFramework::NewDataSet::geometry_shaderRow^  NewDataSet::constantRow::geometry_shaderRow::get() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::geometry_shaderRow^  >(this->GetParentRow(this->Table->ParentRelations[L"geometry_shader_constant"])));
    }
    inline System::Void NewDataSet::constantRow::geometry_shaderRow::set(nGENEFramework::NewDataSet::geometry_shaderRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"geometry_shader_constant"]);
    }
    
    inline nGENEFramework::NewDataSet::pixel_shaderRow^  NewDataSet::constantRow::pixel_shaderRow::get() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::pixel_shaderRow^  >(this->GetParentRow(this->Table->ParentRelations[L"pixel_shader_constant"])));
    }
    inline System::Void NewDataSet::constantRow::pixel_shaderRow::set(nGENEFramework::NewDataSet::pixel_shaderRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"pixel_shader_constant"]);
    }
    
    inline ::System::Boolean NewDataSet::constantRow::IstypeNull() {
        return this->IsNull(this->tableconstant->typeColumn);
    }
    
    inline ::System::Void NewDataSet::constantRow::SettypeNull() {
        this[this->tableconstant->typeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::constantRow::IssemanticNull() {
        return this->IsNull(this->tableconstant->semanticColumn);
    }
    
    inline ::System::Void NewDataSet::constantRow::SetsemanticNull() {
        this[this->tableconstant->semanticColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::constantRow::IsdynamicNull() {
        return this->IsNull(this->tableconstant->dynamicColumn);
    }
    
    inline ::System::Void NewDataSet::constantRow::SetdynamicNull() {
        this[this->tableconstant->dynamicColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::constantRow::Isvertex_shader_IdNull() {
        return this->IsNull(this->tableconstant->vertex_shader_IdColumn);
    }
    
    inline ::System::Void NewDataSet::constantRow::Setvertex_shader_IdNull() {
        this[this->tableconstant->vertex_shader_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::constantRow::Isgeometry_shader_IdNull() {
        return this->IsNull(this->tableconstant->geometry_shader_IdColumn);
    }
    
    inline ::System::Void NewDataSet::constantRow::Setgeometry_shader_IdNull() {
        this[this->tableconstant->geometry_shader_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::constantRow::Ispixel_shader_IdNull() {
        return this->IsNull(this->tableconstant->pixel_shader_IdColumn);
    }
    
    inline ::System::Void NewDataSet::constantRow::Setpixel_shader_IdNull() {
        this[this->tableconstant->pixel_shader_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::geometry_shaderRow::geometry_shaderRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablegeometry_shader = (cli::safe_cast<nGENEFramework::NewDataSet::geometry_shaderDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::geometry_shaderRow::file::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablegeometry_shader->fileColumn]));
    }
    inline System::Void NewDataSet::geometry_shaderRow::file::set(System::String^  value) {
        this[this->tablegeometry_shader->fileColumn] = value;
    }
    
    inline System::String^  NewDataSet::geometry_shaderRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablegeometry_shader->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'geometry_shader\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::geometry_shaderRow::name::set(System::String^  value) {
        this[this->tablegeometry_shader->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::geometry_shaderRow::profile::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablegeometry_shader->profileColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'profile\' in table \'geometry_shader\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::geometry_shaderRow::profile::set(System::String^  value) {
        this[this->tablegeometry_shader->profileColumn] = value;
    }
    
    inline System::String^  NewDataSet::geometry_shaderRow::function::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablegeometry_shader->functionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'function\' in table \'geometry_shader\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::geometry_shaderRow::function::set(System::String^  value) {
        this[this->tablegeometry_shader->functionColumn] = value;
    }
    
    inline System::String^  NewDataSet::geometry_shaderRow::defines::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablegeometry_shader->definesColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'defines\' in table \'geometry_shader\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::geometry_shaderRow::defines::set(System::String^  value) {
        this[this->tablegeometry_shader->definesColumn] = value;
    }
    
    inline System::Int32 NewDataSet::geometry_shaderRow::geometry_shader_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablegeometry_shader->geometry_shader_IdColumn]));
    }
    inline System::Void NewDataSet::geometry_shaderRow::geometry_shader_Id::set(System::Int32 value) {
        this[this->tablegeometry_shader->geometry_shader_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::geometry_shaderRow::pass_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablegeometry_shader->pass_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'pass_Id\' in table \'geometry_shader\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::geometry_shaderRow::pass_Id::set(System::Int32 value) {
        this[this->tablegeometry_shader->pass_IdColumn] = value;
    }
    
    inline nGENEFramework::NewDataSet::passRow^  NewDataSet::geometry_shaderRow::passRow::get() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::passRow^  >(this->GetParentRow(this->Table->ParentRelations[L"pass_geometry_shader"])));
    }
    inline System::Void NewDataSet::geometry_shaderRow::passRow::set(nGENEFramework::NewDataSet::passRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"pass_geometry_shader"]);
    }
    
    inline ::System::Boolean NewDataSet::geometry_shaderRow::IsnameNull() {
        return this->IsNull(this->tablegeometry_shader->nameColumn);
    }
    
    inline ::System::Void NewDataSet::geometry_shaderRow::SetnameNull() {
        this[this->tablegeometry_shader->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::geometry_shaderRow::IsprofileNull() {
        return this->IsNull(this->tablegeometry_shader->profileColumn);
    }
    
    inline ::System::Void NewDataSet::geometry_shaderRow::SetprofileNull() {
        this[this->tablegeometry_shader->profileColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::geometry_shaderRow::IsfunctionNull() {
        return this->IsNull(this->tablegeometry_shader->functionColumn);
    }
    
    inline ::System::Void NewDataSet::geometry_shaderRow::SetfunctionNull() {
        this[this->tablegeometry_shader->functionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::geometry_shaderRow::IsdefinesNull() {
        return this->IsNull(this->tablegeometry_shader->definesColumn);
    }
    
    inline ::System::Void NewDataSet::geometry_shaderRow::SetdefinesNull() {
        this[this->tablegeometry_shader->definesColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::geometry_shaderRow::Ispass_IdNull() {
        return this->IsNull(this->tablegeometry_shader->pass_IdColumn);
    }
    
    inline ::System::Void NewDataSet::geometry_shaderRow::Setpass_IdNull() {
        this[this->tablegeometry_shader->pass_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< nGENEFramework::NewDataSet::constantRow^  >^  NewDataSet::geometry_shaderRow::GetconstantRows() {
        if (this->Table->ChildRelations[L"geometry_shader_constant"] == nullptr) {
            return gcnew cli::array< nGENEFramework::NewDataSet::constantRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< nGENEFramework::NewDataSet::constantRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"geometry_shader_constant"])));
        }
    }
    
    
    inline NewDataSet::pixel_shaderRow::pixel_shaderRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablepixel_shader = (cli::safe_cast<nGENEFramework::NewDataSet::pixel_shaderDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::pixel_shaderRow::file::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablepixel_shader->fileColumn]));
    }
    inline System::Void NewDataSet::pixel_shaderRow::file::set(System::String^  value) {
        this[this->tablepixel_shader->fileColumn] = value;
    }
    
    inline System::String^  NewDataSet::pixel_shaderRow::name::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablepixel_shader->nameColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'name\' in table \'pixel_shader\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::pixel_shaderRow::name::set(System::String^  value) {
        this[this->tablepixel_shader->nameColumn] = value;
    }
    
    inline System::String^  NewDataSet::pixel_shaderRow::profile::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablepixel_shader->profileColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'profile\' in table \'pixel_shader\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::pixel_shaderRow::profile::set(System::String^  value) {
        this[this->tablepixel_shader->profileColumn] = value;
    }
    
    inline System::String^  NewDataSet::pixel_shaderRow::function::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablepixel_shader->functionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'function\' in table \'pixel_shader\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::pixel_shaderRow::function::set(System::String^  value) {
        this[this->tablepixel_shader->functionColumn] = value;
    }
    
    inline System::String^  NewDataSet::pixel_shaderRow::defines::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablepixel_shader->definesColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'defines\' in table \'pixel_shader\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::pixel_shaderRow::defines::set(System::String^  value) {
        this[this->tablepixel_shader->definesColumn] = value;
    }
    
    inline System::Int32 NewDataSet::pixel_shaderRow::pixel_shader_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablepixel_shader->pixel_shader_IdColumn]));
    }
    inline System::Void NewDataSet::pixel_shaderRow::pixel_shader_Id::set(System::Int32 value) {
        this[this->tablepixel_shader->pixel_shader_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::pixel_shaderRow::pass_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablepixel_shader->pass_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'pass_Id\' in table \'pixel_shader\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::pixel_shaderRow::pass_Id::set(System::Int32 value) {
        this[this->tablepixel_shader->pass_IdColumn] = value;
    }
    
    inline nGENEFramework::NewDataSet::passRow^  NewDataSet::pixel_shaderRow::passRow::get() {
        return (cli::safe_cast<nGENEFramework::NewDataSet::passRow^  >(this->GetParentRow(this->Table->ParentRelations[L"pass_pixel_shader"])));
    }
    inline System::Void NewDataSet::pixel_shaderRow::passRow::set(nGENEFramework::NewDataSet::passRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"pass_pixel_shader"]);
    }
    
    inline ::System::Boolean NewDataSet::pixel_shaderRow::IsnameNull() {
        return this->IsNull(this->tablepixel_shader->nameColumn);
    }
    
    inline ::System::Void NewDataSet::pixel_shaderRow::SetnameNull() {
        this[this->tablepixel_shader->nameColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::pixel_shaderRow::IsprofileNull() {
        return this->IsNull(this->tablepixel_shader->profileColumn);
    }
    
    inline ::System::Void NewDataSet::pixel_shaderRow::SetprofileNull() {
        this[this->tablepixel_shader->profileColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::pixel_shaderRow::IsfunctionNull() {
        return this->IsNull(this->tablepixel_shader->functionColumn);
    }
    
    inline ::System::Void NewDataSet::pixel_shaderRow::SetfunctionNull() {
        this[this->tablepixel_shader->functionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::pixel_shaderRow::IsdefinesNull() {
        return this->IsNull(this->tablepixel_shader->definesColumn);
    }
    
    inline ::System::Void NewDataSet::pixel_shaderRow::SetdefinesNull() {
        this[this->tablepixel_shader->definesColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean NewDataSet::pixel_shaderRow::Ispass_IdNull() {
        return this->IsNull(this->tablepixel_shader->pass_IdColumn);
    }
    
    inline ::System::Void NewDataSet::pixel_shaderRow::Setpass_IdNull() {
        this[this->tablepixel_shader->pass_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< nGENEFramework::NewDataSet::constantRow^  >^  NewDataSet::pixel_shaderRow::GetconstantRows() {
        if (this->Table->ChildRelations[L"pixel_shader_constant"] == nullptr) {
            return gcnew cli::array< nGENEFramework::NewDataSet::constantRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< nGENEFramework::NewDataSet::constantRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"pixel_shader_constant"])));
        }
    }
    
    
    inline NewDataSet::libraryRowChangeEvent::libraryRowChangeEvent(nGENEFramework::NewDataSet::libraryRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline nGENEFramework::NewDataSet::libraryRow^  NewDataSet::libraryRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::libraryRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::materialRowChangeEvent::materialRowChangeEvent(nGENEFramework::NewDataSet::materialRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline nGENEFramework::NewDataSet::materialRow^  NewDataSet::materialRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::materialRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::passRowChangeEvent::passRowChangeEvent(nGENEFramework::NewDataSet::passRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline nGENEFramework::NewDataSet::passRow^  NewDataSet::passRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::passRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::textureRowChangeEvent::textureRowChangeEvent(nGENEFramework::NewDataSet::textureRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline nGENEFramework::NewDataSet::textureRow^  NewDataSet::textureRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::textureRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::vertex_shaderRowChangeEvent::vertex_shaderRowChangeEvent(nGENEFramework::NewDataSet::vertex_shaderRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline nGENEFramework::NewDataSet::vertex_shaderRow^  NewDataSet::vertex_shaderRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::vertex_shaderRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::constantRowChangeEvent::constantRowChangeEvent(nGENEFramework::NewDataSet::constantRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline nGENEFramework::NewDataSet::constantRow^  NewDataSet::constantRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::constantRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::geometry_shaderRowChangeEvent::geometry_shaderRowChangeEvent(nGENEFramework::NewDataSet::geometry_shaderRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline nGENEFramework::NewDataSet::geometry_shaderRow^  NewDataSet::geometry_shaderRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::geometry_shaderRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::pixel_shaderRowChangeEvent::pixel_shaderRowChangeEvent(nGENEFramework::NewDataSet::pixel_shaderRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline nGENEFramework::NewDataSet::pixel_shaderRow^  NewDataSet::pixel_shaderRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::pixel_shaderRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
