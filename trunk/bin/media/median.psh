// 3x3 Median filter pixel shader
// Copyright (C) Wojciech Toman 2009
// Info: authors of original file are Morgan McGuire and Kyle Whitson
// 		 http://graphics.cs.williams.edu. The changes to their source
//		 mainly include moving it from GLSL to HLSL.

sampler diffuseMap: register(s0);



// VertexShader results
struct VertexOutput
{
	float4 hPosition  : POSITION0;
    float2 texCoord   : TEXCOORD0;
};


float2 pixel_size = {1.0f / 800.0f, 1.0f / 600.0f};

// Input texture
uniform sampler2D src;

// Change these 2 defines to change precision
#define vec float3
#define toVec(x) x.xyz

#define s2(a, b)				temp = a; a = min(a, b); b = max(temp, b);
#define mn3(a, b, c)			s2(a, b); s2(a, c);
#define mx3(a, b, c)			s2(b, c); s2(a, c);

#define mnmx3(a, b, c)			mx3(a, b, c); s2(a, b);                                   // 3 exchanges
#define mnmx4(a, b, c, d)		s2(a, b); s2(c, d); s2(a, c); s2(b, d);                   // 4 exchanges
#define mnmx5(a, b, c, d, e)	s2(a, b); s2(c, d); mn3(a, c, e); mx3(b, d, e);           // 6 exchanges
#define mnmx6(a, b, c, d, e, f) s2(a, d); s2(b, e); s2(c, f); mn3(a, b, c); mx3(d, e, f); // 7 exchanges


float4 main(VertexOutput IN): COLOR0
{
	vec v[9];

	// Add the pixels which make up our window to the pixel array.
	for(int dX = -1; dX <= 1; ++dX)
	{
		for(int dY = -1; dY <= 1; ++dY)
		{
			float2 offset = float2(float(dX), float(dY));	    
			v[(dX + 1) * 3 + (dY + 1)] = toVec(tex2D(diffuseMap, IN.texCoord.xy + offset * pixel_size));
		}
	}

	vec temp;

	// It's a pretty cool method to sort 9-element array
	mnmx6(v[0], v[1], v[2], v[3], v[4], v[5]);
	mnmx5(v[1], v[2], v[3], v[4], v[6]);
	mnmx4(v[2], v[3], v[4], v[7]);
	mnmx3(v[3], v[4], v[8]);
	
	float4 colour = 1.0f;
	toVec(colour) = v[4];
	
	return colour;
}