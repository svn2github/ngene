// Gaussian blur pixel shader
// Copyright (C) Wojciech Toman 2008

sampler aoTex: register(s1);
sampler depthTex: register(s2);
sampler normalTex: register(s3);

float blurStrength = 0.3f;

float2 pixel_size = {1.0f / 800.0f, 1.0f / 600.0f};


float2 PixelKernel[13] =
{
    { 0, -6 },
    { 0, -5 },
    { 0, -4 },
    { 0, -3 },
    { 0, -2 },
    { 0, -1 },
    { 0,  0 },
    { 0,  1 },
    { 0,  2 },
    { 0,  3 },
    { 0,  4 },
    { 0,  5 },
    { 0,  6 },
};

static const float BlurWeights[13] = 
{
    0.002216,
    0.008764,
    0.026995,
    0.064759,
    0.120985,
    0.176033,
    0.199471,
    0.176033,
    0.120985,
    0.064759,
    0.026995,
    0.008764,
    0.002216,
};


struct VertexOutput
{
	float4 position: POSITION0;
	float2 texCoord: TEXCOORD0;
};


float4 PS_GaussianBlur(VertexOutput IN): COLOR0
{
    float depth = length(tex2D(depthTex, IN.texCoord).xyz);
    if(depth == 0.0f)
    {
    	discard;
    	return 0.0f;
    }
    
    float4 colour = 0.0f;
	float3 normalCentre = (tex2D(normalTex, IN.texCoord)).xyz;
    float pixelSize = blurStrength * pixel_size.y;
    
    float total = 0.0f;
    for(int i = 0; i < 13; i++)
    {
    	float contribution = 1.0f;
		
    	float depthTap = length(tex2D(depthTex, IN.texCoord + PixelKernel[i].xy * pixelSize).xyz);
    	float3 normalTap = tex2D(normalTex, IN.texCoord + PixelKernel[i].xy * pixelSize).xyz;

//	 	if(dot(normalCentre, normalTap) > 0.9)
//    	{
	 		colour.xyz += tex2D(aoTex, IN.texCoord + PixelKernel[i].xy * pixelSize).xyz * BlurWeights[i] * 
	 			contribution;// * (saturate(dot(normalize(normalCentre), normalize(normalTap))));
	 		total += BlurWeights[i];
//	 	}
 	}

//	colour.w = 1.0f;
    return colour / total;
}