// Spot-light pixel shader
// Copyright (C) Wojciech Toman 2008

sampler diffuseTex: register(s0);
sampler positionTex: register(s1);
sampler normalTex: register(s2);

float4 lightColour = {1.0f, 1.0f, 1.0f, 1.0f};
float4 ambient = {0.1f, 0.1f, 0.1f, 1.0f};
float lightIntensity = 1.0f;
float lightFov = 0.5f;

float spotExponent = 20;
float constantAttenuation = 0.1f;
float linearAttenuation = 0.05f;
float quadraticAttenuation = 0.025f;


struct VertexOutput
{
	float4 position: POSITION0;
	float2 texCoord: TEXCOORD0;
	float3 lightPosition: TEXCOORD1;
	float3 eyeVec: TEXCOORD2;
	float3 lightDir: TEXCOORD3;
};


float4 main(VertexOutput IN): COLOR0
{
	float4 diffuse = tex2D(diffuseTex, IN.texCoord);
	if((diffuse.x == 0.0f && diffuse.y == 0.0f && diffuse.z == 0.0f) || diffuse.w == 0.0f)
	{
		discard;
		return 0.0f;
	}
	
	float3 normal;
	normal.xyz = (tex2D(normalTex, IN.texCoord)).xyz;
	
	if(length(normal) <= 0.01f)
	{
		discard;
		return 0.0f;
	}
	
	float3 position;
	float4 parameters = tex2D(positionTex, IN.texCoord);
	position = parameters.xyz;
	
	float3 lightPosition = IN.lightPosition;
	float3 lightDir = float3(lightPosition - position);
	float NdotL = dot(normalize(normal), lightDir);
	
	float attenuation;
	float spotEffect;
	float dist = length(lightDir);
	
	float4 colour = 0;
	if(NdotL > 0.0f)
	{
		spotEffect = dot(normalize(IN.lightDir), normalize(lightDir));
		if(spotEffect > lightFov)
		{
			spotEffect = pow(abs(spotEffect), spotExponent);
			attenuation = spotEffect / (constantAttenuation +
						  linearAttenuation * dist +
						  quadraticAttenuation * dist * dist);
						  
			float3 V = -IN.eyeVec;
			
			float3 H = normalize(lightDir + V);
			
			float shininess = 0.5f;
			float specular_intensity = parameters.w;
			float e = shininess * 64;
			float kD = saturate(dot(normalize(normal), lightDir)); 
			float kS = NdotL * specular_intensity * pow( saturate( dot( normal, H ) ), e ) * sqrt( ( e + 1 ) / 2 );
			
			float3 emission = float4(diffuse.xyz * tex2D(normalTex, IN.texCoord).w * (saturate(dot(normal, lightDir)) + 0.0001f), 1.0f).xyz;
			diffuse.xyz += emission * kS;
			
			colour = (attenuation + 0.001f) * (ambient + diffuse * lightColour *
				lightIntensity * NdotL + kS);
			colour = saturate(colour);
		}
	}
	
	colour.a = 1.0f;
	
	return colour;
}